This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
.python-version
Dockerfile
LICENSE
pyproject.toml
README.md
smithery.yaml
whale-tracker.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
__pycache__
.env
.venv
</file>

<file path=".python-version">
3.13
</file>

<file path="Dockerfile">
# Generated by https://smithery.ai. See: https://smithery.ai/docs/config#dockerfile
# Use official Python 3.13 slim image
FROM python:3.13-slim

# Set working directory
WORKDIR /app

# Copy project metadata and source
COPY pyproject.toml uv.lock whale-tracker.py ./

# Install dependencies
RUN pip install --no-cache-dir . python-dotenv

# Expose no ports since MCP runs over stdio

# Default entrypoint to run the MCP server
ENTRYPOINT ["python", "whale-tracker.py"]
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 kukapay

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="pyproject.toml">
[project]
name = "whale-tracker-mcp"
version = "0.1.0"
description = "A mcp server for tracking cryptocurrency whale transactions using the Whale Alert API"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "httpx>=0.28.1",
    "mcp[cli]>=1.4.0",
]
</file>

<file path="README.md">
# Whale Tracker MCP Server


**A Model Context Protocol (MCP) server for tracking cryptocurrency whale transactions using the Whale Alert API**

[![mit license](https://img.shields.io/badge/license-MIT-blue)](https://opensource.org/license/mit/)
[![python versions](https://img.shields.io/pypi/pyversions/mcp)](https://www.python.org/downloads/)
[![smithery badge](https://smithery.ai/badge/@kukapay/whale-tracker-mcp)](https://smithery.ai/server/@kukapay/whale-tracker-mcp)

<!-- omit in toc -->
## Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Usage](#usage)
  - [Running in Development Mode](#running-in-development-mode)
  - [Integrating with Claude Desktop](#integrating-with-claude-desktop)
  - [Direct Execution](#direct-execution)
- [Examples](#examples)
- [API Key Configuration](#api-key-configuration)
- [License](#license)
- [Acknowledgements](#acknowledgements)


## Overview

The `whale-tracker-mcp` server is a Python-based implementation of the [Model Context Protocol (MCP)](https://modelcontextprotocol.io) that integrates with the [Whale Alert API](https://docs.whale-alert.io/#endpoints). It enables real-time tracking and analysis of large cryptocurrency transactions ("whale" movements) by exposing tools, resources, and prompts to MCP-compatible clients like Claude Desktop.

This server is designed for cryptocurrency enthusiasts, developers, and analysts who want to monitor whale activity directly within their LLM-powered workflows.

## Features

- **Tools**:
  - `get_recent_transactions`: Fetch recent whale transactions with optional filters for blockchain, minimum value, and limit.
  - `get_transaction_details`: Retrieve detailed information about a specific transaction by its ID.
- **Resources**:
  - `whale://transactions/{blockchain}`: Expose recent transactions for a specified blockchain as contextual data.
- **Prompts**:
  - `query_whale_activity`: A reusable template for analyzing whale transaction patterns, optionally filtered by blockchain.
- **Asynchronous API Calls**: Uses `httpx` for efficient, non-blocking requests to the Whale Alert API.
- **Environment Variable Support**: Securely manage your API key via a `.env` file.

## Prerequisites

- **Python**: Version 3.10 or higher.
- **Whale Alert API Key**: Sign up at [whale-alert.io](https://whale-alert.io/) to obtain an API key.
- **MCP Client**: Compatible with MCP clients like Claude Desktop or the MCP Inspector.

## Installation

### Installing via Smithery

To install Whale Tracker for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/whale-tracker-mcp):

```bash
npx -y @smithery/cli install @kukapay/whale-tracker-mcp --client claude
```

1. **Clone the repository**:
```bash
git clone https://github.com/kukapay/whale-tracker-mcp.git
cd whale-tracker-mcp
```
2. Install dependencies: We recommend using uv for dependency management:
```bash
uv add "mcp[cli]" httpx python-dotenv
```   
Alternatively, use pip:
```bash
pip install mcp httpx python-dotenv
```
3. Set up your API key: Create a .env file in the project root and add your Whale Alert API key:
```
WHALE_ALERT_API_KEY=your_api_key_here
```

## Usage
### Running in Development Mode

Test the server locally with the MCP Inspector:

```bash
mcp dev whale_tracker.py --with-editable .
```

This opens a web interface where you can explore the server's tools, resources, and prompts.

### Integrating with Claude Desktop

Install the server into Claude Desktop for seamless integration:

```bash
mcp install whale_tracker.py --name "WhaleTracker" -f .env
```

- `--name "WhaleTracker"`: Sets a custom name for the server in Claude Desktop.
- `-f .env`: Loads the API key from the .env file.

Restart Claude Desktop after installation. Look for the hammer icon in the input box to confirm the server is loaded, then try commands like:

- "Show me recent whale transactions on Bitcoin."
- "Get details for transaction ID 123456789."
- "Analyze whale activity on Ethereum."

### Direct Execution

Run the server standalone for custom deployments:

```bash
python whale_tracker.py
```

Or use the MCP CLI:

```bash
mcp run whale_tracker.py
```

## Examples

Here‚Äôs how you might interact with the server in Claude Desktop:

### Fetch Recent Transactions:

```text
What are the latest whale transactions on Ethereum with a minimum value of $1,000,000?
```
The server calls `get_recent_transactions` with `blockchain="ethereum"` and `min_value=1000000`.

### Get Transaction Details:

```text
Tell me about transaction ID 123456789.
```

The server uses `get_transaction_details` to fetch and display the transaction data.

### Analyze Whale Activity:

```text
Analyze recent whale transactions on Bitcoin.
```

The `query_whale_activity` prompt triggers an analysis based on the `whale://transactions/bitcoin` resource.

## API Key Configuration

The server requires a Whale Alert API key, which is loaded from the `WHALE_ALERT_API_KEY` environment variable. To configure it:

- Create a .env file:
```text
WHALE_ALERT_API_KEY=your_api_key_here
```
- Ensure `python-dotenv` is installed (included in the dependencies).
- The server will automatically load the key at startup.

Alternatively, pass the key directly when running the server:

```bash
mcp install whale_tracker.py -v WHALE_ALERT_API_KEY=your_api_key_here
```

## License

This project is licensed under the MIT License. See the LICENSE file for details.

## Acknowledgements

- Whale Alert for providing the API to track cryptocurrency whale transactions.
- Model Context Protocol team for the MCP specification and Python SDK.
- httpx for a robust HTTP client library.

Happy whale tracking! üê≥
</file>

<file path="smithery.yaml">
# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml

startCommand:
  type: stdio
  configSchema:
    # JSON Schema defining the configuration options for the MCP.
    type: object
    required:
      - whaleAlertApiKey
    properties:
      whaleAlertApiKey:
        type: string
        description: Your Whale Alert API key to authenticate requests
  commandFunction:
    # A JS function that produces the CLI command based on the given config to start the MCP on stdio.
    |-
    (config) => ({
      command: "python",
      args: ["whale-tracker.py"],
      env: { WHALE_ALERT_API_KEY: config.whaleAlertApiKey }
    })
  exampleConfig:
    whaleAlertApiKey: YOUR_API_KEY_HERE
</file>

<file path="whale-tracker.py">
import os
from typing import Optional
import httpx
from mcp.server.fastmcp import FastMCP, Context
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
API_KEY = os.getenv("WHALE_ALERT_API_KEY")
BASE_URL = "https://api.whale-alert.io/v1"

if not API_KEY:
    raise ValueError("WHALE_ALERT_API_KEY environment variable is required")

# Initialize the MCP server
mcp = FastMCP("WhaleTracker", dependencies=["httpx"])

# Helper function to make API requests
async def fetch_from_api(endpoint: str, params: dict) -> dict:
    async with httpx.AsyncClient() as client:
        params["api_key"] = API_KEY
        response = await client.get(f"{BASE_URL}/{endpoint}", params=params)
        response.raise_for_status()
        return response.json()

# Tool: Fetch recent whale transactions
@mcp.tool()
async def get_recent_transactions(
    blockchain: Optional[str] = None,
    min_value: Optional[int] = 500000,
    limit: int = 10
) -> str:
    """Fetch recent whale transactions, optionally filtered by blockchain and minimum value (USD)."""
    params = {
        "min_value": min_value,
        "limit": limit
    }
    if blockchain:
        params["blockchain"] = blockchain.lower()

    data = await fetch_from_api("transactions", params)
    if data["result"] != "success":
        return "Error fetching transactions"

    transactions = data["transactions"]
    return "\n".join(
        f"{tx['timestamp']} - {tx['blockchain']} - {tx['amount_usd']} USD "
        f"(Tx ID: {tx['id']})"
        for tx in transactions
    )

# Tool: Get details of a specific transaction
@mcp.tool()
async def get_transaction_details(transaction_id: str) -> str:
    """Fetch details of a specific whale transaction by its ID."""
    params = {"id": transaction_id}
    data = await fetch_from_api("transaction", params)
    if data["result"] != "success":
        return f"Error fetching transaction {transaction_id}"

    tx = data["transaction"]
    return (
        f"Transaction ID: {tx['id']}\n"
        f"Blockchain: {tx['blockchain']}\n"
        f"Timestamp: {tx['timestamp']}\n"
        f"Amount: {tx['amount']} {tx['symbol']} (${tx['amount_usd']} USD)\n"
        f"From: {tx['from'].get('address', 'Unknown')}\n"
        f"To: {tx['to'].get('address', 'Unknown')}"
    )

# Resource: Dynamic transaction data
@mcp.resource("whale://transactions/{blockchain}")
async def get_transactions_by_blockchain(blockchain: str) -> str:
    """Expose recent whale transactions for a specific blockchain as a resource."""
    params = {
        "blockchain": blockchain.lower(),
        "min_value": 500000,
        "limit": 5
    }
    data = await fetch_from_api("transactions", params)
    if data["result"] != "success":
        return f"No transactions found for {blockchain}"

    transactions = data["transactions"]
    return "\n".join(
        f"{tx['timestamp']} - {tx['amount_usd']} USD (Tx ID: {tx['id']})"
        for tx in transactions
    )

# Prompt: Query whale activity
@mcp.prompt()
def query_whale_activity(blockchain: Optional[str] = None) -> str:
    """Generate a prompt to analyze whale activity on a specific blockchain."""
    if blockchain:
        return f"Analyze recent whale transactions on {blockchain}. What patterns do you notice?"
    return "Analyze recent whale transactions across all blockchains. What patterns do you notice?"

# Run the server directly (optional)
if __name__ == "__main__":
    mcp.run()
</file>

</files>
