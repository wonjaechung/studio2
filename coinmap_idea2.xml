<file path="LICENSE">
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
</file>

<file path="README.md">
# Mastering Onchain Analytics

Online Book: 
- En: [Mastering Onchain Analytics](https://tutorial.sixdegree.xyz/)
- Zh: [精通链上数据分析](https://tutorial.sixdegree.xyz/v/zh/)

This is a series tutorials for blockchain analysis enthusiasts, helping new users learn blockchain data analysis from scratch and become an on-chain data analyst master.


# table of contents
| **Id**           | **English**                                                                                | **Chinese**                                                                |
|------------------|--------------------------------------------------------------------------------------------|----------------------------------------------------------------------------|
| **Elementary**   | ---                                                                                        | ---                                                                        |
| #0           | [become chain analyst](en/ch00/ch00-become-chain-analyst.md)                               | [成为链上数据分析师](zh/ch01/readme.md)                          |
| #1           | [dune platform introduction](en/ch01/ch01-dune-platform-introduction.md)                   | [Dune平台简介](zh/ch02/readme.md)                     |
| #2           | [quickstart](en/ch02/ch02-quickstart.md)                                                   | [数据分析新手上路](zh/ch03/readme.md)                                     |
| #3           | [build first dashboard](en/ch03/ch03-build-first-dashboard.md)                             | [创建第一个Dune数据看板](zh/ch04/readme.md)                     |
| #4           | [understanding tables](en/ch04/ch04-understanding-tables.md)                               | [熟悉数据表](zh/ch05/readme.md)                              |
| #5           | [sql basics part1](en/ch05/ch05-sql-basics-part1.md)                                       | [SQL基础（一）](zh/ch06/readme.md)                               |
| #6           | [sql basics part2](en/ch06/ch06-sql-basics-part2.md)                                       | [SQL基础（二）](zh/ch07/readme.md)                               |
| #7           | [practice build lens dashboard part1](en/ch07/ch07-practice-build-lens-dashboard-part1.md) | [实践案例：制作Lens的数据看板（一）](zh/ch08/readme.md) |
| #8           | [practice build lens dashboard part2](en/ch08/ch08-practice-build-lens-dashboard-part2.md) | [实践案例：制作Lens的数据看板（二）](zh/ch09/readme.md) |
| **Intermediate** | ----                                                                                     | ----                                                                       |
| #9           | [useful queries part1](en/ch09/ch09-useful-queries-part1.md)                               | [常见查询一：ERC20代币价格](zh/ch09/ch09-useful-queries-part1.md)                    |
| #10          | [useful queries part2](en/ch10/ch10-useful-queries-part2.md)                               | [常见查询二：代币的持有者、总供应量、账户余额](zh/ch10/ch10-useful-queries-part2.md)             |
| #11          | [useful queries part3](en/ch11/ch11-useful-queries-part3.md)                               | [常见查询三：自定义数据、数字序列、数组、JSON等](zh/ch11/ch11-useful-queries-part3.md)          |
| #12          | [nft analysis](en/ch12/ch12-nft-analysis.md)                                               | [NFT数据分析](zh/ch12/ch12-nft-analysis.md)                                    |
| #13          | [lending analysis](en/ch13/ch13-lending-analysis.md)                                       | [借贷协议数据分析](zh/ch13/ch13-lending-analysis.md)                               |
| #14          | [defi analysis](en/ch14/ch14-defi-analysis.md)                                             | [DeFi数据分析](zh/ch14/ch14-defi-analysis.md)                                  |
| #15          | [dunesql introduction](en/ch15/ch15-dunesql-introduction.md)                               | [Dune SQL 查询引擎入门](zh/ch15/ch15-dunesql-introduction.md)                    |
| #16          | [blockchain analysis polygon](en/ch16/ch16-blockchain-analysis-polygon.md)                 | [Polygon区块链概况分析](zh/ch16/ch16-blockchain-analysis-polygon.md)              |
| #17          | [mev analysis uniswap](en/ch17/ch17-mev-analysis-uniswap.md)                               | [MEV数据分析——以Uniswap为例](zh/ch17/ch17-mev-analysis-uniswap.md)                |
| #18          | [uniswap multichain analysis](en/ch18/ch18-uniswap-multichain-analysis.md)                 | [Uniswap多链数据对比分析](zh/ch18/ch18-uniswap-multichain-analysis.md)             |
| #19          | [useful metrics](en/ch19/ch19-useful-metrics.md)                                           | [各类常见指标分析](zh/ch19/ch19-useful-metrics.md)                                 |
| **Advanced**     |  ---                                                                                       |  ---                                                                       |
| #20          | [network analysis](en/ch20/ch20-network-analysis.md)                                       | [区块链网络分析](zh/ch20/ch20-network-analysis.md)                                |
| #21          | [btc analysis](en/ch21/ch21-btc-analysis.md)                                               | [BTC数据分析-以指标CDD为例](zh/ch21/ch21-btc-analysis.md)                           |
| #22          | [how to build spellbook](en/ch22/ch22-how-to-build-spellbook.md)                           | [如何构建魔法表（Spellbook）](zh/ch22/ch22-how-to-build-spellbook.md)               |
| #23          | [how to build app use dune api](en/ch23/ch23-how-to-build-app-use-dune-api.md)             | [使用Dune API创建应用程序](zh/ch23/ch23-how-to-build-app-use-dune-api.md)          |



## About Us

[SixdegreeLab](https://twitter.com/SixdegreeLab) are a group of on-chain data enthusiasts. Our mission is to provide users with accurate on-chain data charts, analysis, and insights, and we are committed to popularizing on-chain data analysis. By establishing a community, writing tutorials, etc., train data analysts on the chain, output valuable analysis content, promote the community to build the data layer of the blockchain, and cultivate talents for the broad blockchain data application in the future.

- website: [sixdegree.xyz](https://sixdegree.xyz)
- twitter: [twitter.com/SixdegreeLab](https://twitter.com/SixdegreeLab)
- dune: [dune.com/sixdegree](https://dune.com/sixdegree)
</file>

<file path="SUMMARY.md">
* [简介](README.md)
* [#0 成为链上数据分析师](00_introductions/readme.md)

## 入门教程

* [#1 Dune平台简介](01_platform/dune.md)
* [#2 数据分析新手上路](02_get_started/readme.md)
* [#3 创建第一个Dune数据看板](03_build_first_dashboard/readme.md)
* [#4 熟悉数据表](04_data_tables/readme.md)
* [#5 SQL基础（一）](05_sql_syntax/sql_syntax_1.md)
* [#6 实践案例：制作Lens Protocol的数据看板（一）](06_pratical_case_lens_protocol/readme.md)
* [#7 实践案例：制作Lens Protocol的数据看板（二）](06_pratical_case_lens_protocol/lens_part2.md)
* [#8 SQL基础（二）](05_sql_syntax/sql_syntax_2.md)

## 中级教程

* [#9 常见查询一：ERC20代币价格](07_common_query_samples/readme.md)
* [#10 常见查询二：代币的持有者、总供应量、账户余额](07_common_query_samples/common_queries_part2.md)
* [#11 常见查询三：自定义数据、数字序列、数组、JSON等](07_common_query_samples/common_queries_part3.md)
* [#12 NFT数据分析](08_nft_analysis/readme.md)
* [#13 借贷协议数据分析](09_Lending_Analysis/readme.md)
* [#14 DeFi数据分析](10_defi/readme.md)
* [#15 Dune SQL 查询引擎入门](11_dune_sql/readme.md)
* [#16 Polygon区块链概况分析](13_polygon/readme.md)
* [#17 MEV数据分析——以Uniswap为例](14_MEV_UniswapV3/readme.md)
* [#18 Uniswap 多链数据对比分析](15_uniswap_multichain/readme.md)
* [#19 各类常见指标分析（一）](19_common_index/readme.md)

## 高级教程

* [#20 区块链网络分析](12_Network_Analytics/Network_Analytics.md)
* [#21 如何设计Dashboard - 以BTC指标CDD为例](21_how_to_design_a_dashboard/readme.md)
* [#22 如何构建魔法表（Spell）](22_cast_a_spell/readme.md)
* [#23 使用Dune API创建应用程序](23_app_with_dune_api/readme.md)
</file>

</files>
</file>

<file path="public/logo.svg">
<svg width="46" height="46" viewBox="0 0 46 46" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="23" cy="23" r="23" fill="#54342B"/>
  <path d="M23 10C17.4772 10 13 14.4772 13 20C13 27.5 23 36 23 36C23 36 33 27.5 33 20C33 14.4772 28.5228 10 23 10ZM23 24C20.7909 24 19 22.2091 19 20C19 17.7909 20.7909 16 23 16C25.2091 16 27 17.7909 27 20C27 22.2091 25.2091 24 23 24Z" fill="#00A8C6"/>
  <circle cx="23" cy="20" r="4" fill="#54342B"/>
</svg>
</file>

<file path="src/ai/flows/summarize-blockchain-data.ts">
'use server';

import {z} from 'genkit';
import {ai} from '@/ai/genkit';

/**
 * @fileOverview Summarizes raw blockchain data into natural language for better understanding.
 *
 * - summarizeBlockchainData - A function that summarizes the blockchain data.
 * - SummarizeBlockchainDataInput - The input type for the summarizeBlockchainData function.
 * - SummarizeBlockchainDataOutput - The return type for the summarizeBlockchainData function.
 */

const SummarizeBlockchainDataInputSchema = z.object({
  rawData: z.string().describe('The raw blockchain data to summarize.'),
});

export type SummarizeBlockchainDataInput = z.infer<typeof SummarizeBlockchainDataInputSchema>;

const SummarizeBlockchainDataOutputSchema = z.object({
  summary: z.string().describe('A natural language summary of the blockchain data.'),
});

export type SummarizeBlockchainDataOutput = z.infer<typeof SummarizeBlockchainDataOutputSchema>;

export async function summarizeBlockchainData(input: SummarizeBlockchainDataInput): Promise<SummarizeBlockchainDataOutput> {
  return summarizeBlockchainDataFlow(input);
}

const summarizeBlockchainDataPrompt = ai.definePrompt({
  name: 'summarizeBlockchainDataPrompt',
  input: {schema: SummarizeBlockchainDataInputSchema},
  output: {schema: SummarizeBlockchainDataOutputSchema},
  prompt: `Summarize the following raw blockchain data in a clear and concise manner:\n\n{{rawData}}`,
});

const summarizeBlockchainDataFlow = ai.defineFlow(
  {
    name: 'summarizeBlockchainDataFlow',
    inputSchema: SummarizeBlockchainDataInputSchema,
    outputSchema: SummarizeBlockchainDataOutputSchema,
  },
  async input => {
    const {output} = await summarizeBlockchainDataPrompt(input);
    return {
      summary: output!.summary
    };
  }
);
</file>

<file path="src/ai/dev.ts">
import { config } from 'dotenv';
config();

import '@/ai/flows/summarize-blockchain-data.ts';
</file>

<file path="src/ai/genkit.ts">
import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.0-flash',
});
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 228 12% 10%;
    --foreground: 210 40% 98%;
    --card: 228 10% 14%;
    --card-foreground: 210 40% 98%;
    --popover: 228 12% 10%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 228 12% 10%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 228 10% 20%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 330 100% 60%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 228 10% 25%;
    --input: 228 10% 25%;
    --ring: 330 100% 70%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --sidebar-background: 228 12% 10%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 330 100% 60%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 228 10% 14%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 228 10% 25%;
    --sidebar-ring: 330 100% 70%;
  }
 
  .dark {
    --background: 228 12% 10%;
    --foreground: 210 40% 98%;
    --card: 228 10% 14%;
    --card-foreground: 210 40% 98%;
    --popover: 228 12% 10%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 228 12% 10%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 228 10% 20%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 330 100% 60%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 228 10% 25%;
    --input: 228 10% 25%;
    --ring: 330 100% 70%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 228 12% 10%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 330 100% 60%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 228 10% 14%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 228 10% 25%;
    --sidebar-ring: 330 100% 70%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
  .prose { @apply text-foreground max-w-none; }
  .prose-invert { @apply text-foreground; }
  .prose :where(code):not(:where([class~="not-prose"] *)) {
    @apply text-accent-foreground bg-accent/20 px-1 py-0.5 rounded-sm font-code;
  }
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from 'next';
import './globals.css';
import { Toaster } from '@/components/ui/toaster';
import { SiteHeader } from '@/components/layout/site-header';

export const metadata: Metadata = {
  title: 'Coinmap - The e-Sports League for Traders',
  description: 'Your AI-powered portal to the blockchain.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="dark">
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Roboto+Mono:wght@400;500&family=Russo+One&display=swap" rel="stylesheet" />
      </head>
      <body className="font-body antialiased min-h-screen bg-background text-foreground">
        <header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur-sm">
          {/* The header is now managed by the sidebar component */}
        </header>
        <div className="relative flex min-h-screen flex-col">
          <div className="flex-1">{children}</div>
        </div>
        <Toaster />
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
'use client';
import { Dashboard } from '@/components/dashboard';
import { useSearchParams } from 'next/navigation';

export default function Home() {
  const searchParams = useSearchParams();
  const lang = searchParams.get('lang') === 'en' ? 'en' : 'ko';
  return (
    <>
      <Dashboard lang={lang} />
    </>
  );
}
</file>

<file path="src/components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.tsx">
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.tsx">
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <style
          dangerouslySetInnerHTML={{
            __html: `
[data-chart=${chartId}] {
  --color-red: hsl(0 62.8% 50.6%);
  --color-green: hsl(142.1 76.2% 36.3%);
}
.dark [data-chart=${chartId}] {
  --color-red: hsl(0 62.8% 40.6%);
  --color-green: hsl(142.1 76.2% 26.3%);
}
`,
          }}
        />
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/menubar.tsx">
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/popover.tsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/radio-group.tsx">
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="src/components/ui/sidebar.tsx">
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-11 text-base group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};
</file>

<file path="src/components/ui/toast.tsx">
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/ai-summarizer.tsx">
'use client';

import { useState } from 'react';
import { summarizeBlockchainData } from '@/ai/flows/summarize-blockchain-data';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { BrainCircuit, Loader2, Search, Wand2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Input } from './ui/input';

export function AISummarizer() {
  const [rawData, setRawData] = useState('');
  const [summary, setSummary] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [customReport, setCustomReport] = useState('');
  const [isReportLoading, setIsReportLoading] = useState(false);
  const { toast } = useToast();

  const sampleData = `{
  "tx_hash": "0x1a2b3c...",
  "block": 15123456,
  "from": "0x987...cba",
  "to": "0x654...fed",
  "value": 2.5,
  "currency": "ETH",
  "gas_used": 21000,
  "gas_price": "45 Gwei",
  "timestamp": "2023-11-01T12:00:00Z",
  "status": "success"
}`;

  const handleSubmit = async (data: string) => {
    if (!data.trim()) {
      toast({
        title: 'Error',
        description: 'Input data cannot be empty.',
        variant: 'destructive',
      });
      return;
    }
    setIsLoading(true);
    setSummary('');
    try {
      const result = await summarizeBlockchainData({ rawData: data });
      setSummary(result.summary);
    } catch (error) {
      console.error('Summarization error:', error);
      toast({
        title: 'Error',
        description: 'Failed to generate summary. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCustomReportSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsReportLoading(true);
    // In a real app, you'd send `customReport` to a different Genkit flow.
    // Here we'll just reuse the summarizer for demonstration.
    setTimeout(() => {
        handleSubmit(customReport);
        setIsReportLoading(false);
    }, 1500);
  };


  return (
    <div className="grid md:grid-cols-2 gap-8 items-start">
      <div className="space-y-8">
        <Card className="bg-card/50 backdrop-blur-sm">
            <CardHeader>
            <CardTitle className="flex items-center gap-2 font-headline">
                Generate Summary from Data
            </CardTitle>
            <CardDescription>
                Paste raw blockchain data (e.g., transaction JSON) to get an AI-generated summary.
            </CardDescription>
            </CardHeader>
            <CardContent>
            <form onSubmit={(e) => { e.preventDefault(); handleSubmit(rawData); }} className="flex flex-col gap-4">
                <Textarea
                placeholder="Paste raw data here..."
                className="min-h-[120px] font-code text-xs bg-black/20"
                value={rawData}
                onChange={(e) => setRawData(e.target.value)}
                />
                <div className="flex justify-between items-center">
                <Button 
                    type="button" 
                    variant="ghost"
                    onClick={() => setRawData(sampleData)}
                >
                    Load Sample Data
                </Button>
                <Button type="submit" disabled={isLoading} className="bg-accent hover:bg-accent/80 text-accent-foreground">
                    {isLoading ? (
                    <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Summarizing...
                    </>
                    ) : (
                    'Generate'
                    )}
                </Button>
                </div>
            </form>
            </CardContent>
        </Card>

        <Card className="bg-card/50 backdrop-blur-sm">
            <CardHeader>
            <CardTitle className="flex items-center gap-2 font-headline">
                Visualize Dune
            </CardTitle>
            <CardDescription>
                Use natural language to query Dune Analytics and visualize the results.
            </CardDescription>
            </CardHeader>
            <CardContent>
            <form onSubmit={(e) => e.preventDefault()} className="flex flex-col gap-4">
                <div className="relative">
                    <Input
                    placeholder="e.g., 'Show me the daily active users on Hyperliquid in the last 30 days'"
                    className="pr-10"
                    />
                    <Search className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                </div>
                 <Button type="submit" disabled={isReportLoading} className="bg-accent hover:bg-accent/80 text-accent-foreground self-end">
                    {isReportLoading ? (
                    <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Generating...
                    </>
                    ) : (
                       <>
                        <Wand2 className="mr-2 h-4 w-4" />
                        Visualize
                       </>
                    )}
                </Button>
            </form>
            </CardContent>
        </Card>

        <Card className="bg-card/50 backdrop-blur-sm">
            <CardHeader>
            <CardTitle className="flex items-center gap-2 font-headline">
                Create Your Own Report
            </CardTitle>
            <CardDescription>
                Write down your analysis, notes, or questions. Submit to get an AI-powered report based on market data.
            </CardDescription>
            </CardHeader>
            <CardContent>
            <form onSubmit={handleCustomReportSubmit} className="flex flex-col gap-4">
                <Textarea
                placeholder="E.g., 'Analyze the impact of the recent BTC ETF approval on ETH volatility...'"
                className="min-h-[120px] font-body text-sm bg-black/20"
                value={customReport}
                onChange={(e) => setCustomReport(e.target.value)}
                />
                 <Button type="submit" disabled={isReportLoading} className="bg-accent hover:bg-accent/80 text-accent-foreground self-end">
                    {isReportLoading ? (
                    <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Analyzing...
                    </>
                    ) : (
                    'Generate Report'
                    )}
                </Button>
            </form>
            </CardContent>
        </Card>
      </div>

      <Card className="min-h-[700px] bg-card/50 backdrop-blur-sm flex flex-col sticky top-24">
        <CardHeader>
          <CardTitle className="font-headline">AI Analysis</CardTitle>
          <CardDescription>The AI-generated summary or report will appear below.</CardDescription>
        </CardHeader>
        <CardContent className="flex-grow flex items-center justify-center">
          {isLoading || isReportLoading ? (
             <div className="flex flex-col items-center justify-center text-muted-foreground">
              <Loader2 className="w-10 h-10 animate-spin text-accent mb-4" />
              <p>Analyzing data...</p>
            </div>
          ) : summary ? (
            <div className="prose prose-sm text-foreground/90 w-full">{summary}</div>
          ) : (
            <div className="text-center text-muted-foreground">
                <BrainCircuit className="w-12 h-12 mx-auto mb-4 text-muted-foreground/50"/>
              <p>Your summary is pending.</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/api-connection-status.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Wifi, WifiOff, Settings, CheckCircle, AlertCircle } from 'lucide-react';

interface ExchangeStatus {
  name: string;
  connected: boolean;
  lastSync: string;
  latency: number;
  volume24h: number;
}

export function ApiConnectionStatus() {
  const [exchanges, setExchanges] = useState<ExchangeStatus[]>([
    {
      name: 'Binance',
      connected: true,
      lastSync: '2초 전',
      latency: 45,
      volume24h: 1250000000
    },
    {
      name: 'Bybit',
      connected: true,
      lastSync: '5초 전',
      latency: 67,
      volume24h: 890000000
    },
    {
      name: 'OKX',
      connected: false,
      lastSync: '연결 끊김',
      latency: 0,
      volume24h: 0
    }
  ]);

  const [isConnecting, setIsConnecting] = useState(false);

  const handleConnect = (exchangeName: string) => {
    setIsConnecting(true);
    // Simulate API connection
    setTimeout(() => {
      setExchanges(prev => 
        prev.map(ex => 
          ex.name === exchangeName 
            ? { ...ex, connected: true, lastSync: '방금 전', latency: Math.floor(Math.random() * 100) + 20 }
            : ex
        )
      );
      setIsConnecting(false);
    }, 2000);
  };

  const connectedExchanges = exchanges.filter(ex => ex.connected);
  const totalVolume = connectedExchanges.reduce((sum, ex) => sum + ex.volume24h, 0);

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Wifi className="w-5 h-5" />
          API 연결 상태
        </CardTitle>
        <CardDescription>
          거래소 API 연결 상태 및 실시간 데이터 동기화
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Connection Summary */}
          <div className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
            <div>
              <p className="text-sm font-medium">연결된 거래소</p>
              <p className="text-2xl font-bold text-green-500">
                {connectedExchanges.length} / {exchanges.length}
              </p>
            </div>
            <div className="text-right">
              <p className="text-sm text-muted-foreground">24시간 거래량</p>
              <p className="text-lg font-bold">
                ${(totalVolume / 1000000000).toFixed(1)}B
              </p>
            </div>
          </div>

          {/* Exchange List */}
          <div className="space-y-3">
            {exchanges.map((exchange) => (
              <div key={exchange.name} className="flex items-center justify-between p-3 border rounded-lg">
                <div className="flex items-center gap-3">
                  <div className={`p-2 rounded-full ${
                    exchange.connected ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'
                  }`}>
                    {exchange.connected ? <CheckCircle className="w-4 h-4" /> : <AlertCircle className="w-4 h-4" />}
                  </div>
                  <div>
                    <p className="font-medium">{exchange.name}</p>
                    <p className="text-sm text-muted-foreground">
                      {exchange.connected ? `마지막 동기화: ${exchange.lastSync}` : '연결 끊김'}
                    </p>
                  </div>
                </div>
                
                <div className="flex items-center gap-3">
                  {exchange.connected ? (
                    <>
                      <div className="text-right">
                        <p className="text-sm text-muted-foreground">지연시간</p>
                        <p className="font-medium">{exchange.latency}ms</p>
                      </div>
                      <div className="text-right">
                        <p className="text-sm text-muted-foreground">거래량</p>
                        <p className="font-medium">${(exchange.volume24h / 1000000).toFixed(0)}M</p>
                      </div>
                    </>
                  ) : (
                    <Button 
                      size="sm" 
                      onClick={() => handleConnect(exchange.name)}
                      disabled={isConnecting}
                    >
                      {isConnecting ? '연결 중...' : '연결'}
                    </Button>
                  )}
                </div>
              </div>
            ))}
          </div>

          {/* Connection Quality */}
          <div className="p-3 bg-muted/50 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">연결 품질</span>
              <Badge variant="secondary">우수</Badge>
            </div>
            <Progress value={85} className="h-2" />
            <p className="text-xs text-muted-foreground mt-1">
              평균 지연시간: {Math.round(connectedExchanges.reduce((sum, ex) => sum + ex.latency, 0) / connectedExchanges.length)}ms
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/auth-modal.tsx">
'use client';

import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from './ui/button';
import { Separator } from './ui/separator';

interface AuthModalProps {
    isOpen: boolean;
    onOpenChange: (isOpen: boolean) => void;
}

const GoogleIcon = () => (
    <svg className="w-5 h-5" viewBox="0 0 24 24">
        <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4" />
        <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853" />
        <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l3.66-2.84z" fill="#FBBC05" />
        <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335" />
    </svg>
);

const KakaoIcon = () => (
     <svg className="w-5 h-5" viewBox="0 0 24 24">
        <path fill="#3C1E1E" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c5.52 0 10-4.48 10-10S17.52 2 12 2z" />
        <path fill="#FFCD00" d="M6.43,9.51c-0.03,0.36-0.05,0.72-0.05,1.09c0,2.77,2.25,5.02,5.02,5.02c0.23,0,0.46-0.02,0.68-0.05 c-0.54,1.2-1.76,2.05-3.18,2.05c-1.93,0-3.5-1.57-3.5-3.5C5.4,12.24,5.77,10.74,6.43,9.51z"/>
        <path fill="#FFCD00" d="M14.6,9.51c0.66,1.23,1.03,2.73,1.03,4.31c0,1.93-1.57,3.5-3.5,3.5c-1.42,0-2.64-0.85-3.18-2.05 C9.14,15.58,9.37,15.6,9.6,15.6c2.77,0,5.02-2.25,5.02-5.02C14.6,10.23,14.63,9.87,14.6,9.51z"/>
    </svg>
);

const MetamaskIcon = () => (
    <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" fill="orange"/>
        <path d="M12 2L15.6 6L12 12L8.4 6L12 2Z" fill="white"/>
        <path d="M12 22L8.4 18L12 12L15.6 18L12 22Z" fill="white"/>
        <path d="M2 12L6 8.4L12 12L6 15.6L2 12Z" fill="white"/>
        <path d="M22 12L18 15.6L12 12L18 8.4L22 12Z" fill="white"/>
        <path d="M12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12C10 13.1046 10.8954 14 12 14Z" fill="orange"/>
    </svg>
);


export function AuthModal({ isOpen, onOpenChange }: AuthModalProps) {
    return (
        <Dialog open={isOpen} onOpenChange={onOpenChange}>
            <DialogContent className="sm:max-w-md bg-card/80 backdrop-blur-xl border-accent/20">
                <DialogHeader className="text-center">
                    <DialogTitle className="font-headline text-3xl text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-accent to-blue-400">
                        Join the League
                    </DialogTitle>
                    <DialogDescription className="font-body text-base">
                        Connect your account to start playing in the TradeOS e-Sports League.
                    </DialogDescription>
                </DialogHeader>
                <div className="flex flex-col gap-4 py-4">
                     <Button variant="outline" size="lg" className="h-14 text-lg">
                        <MetamaskIcon /> Connect Wallet
                    </Button>
                    <div className="flex items-center gap-2">
                        <Separator className="flex-1" />
                        <span className="text-muted-foreground text-xs">OR</span>
                        <Separator className="flex-1" />
                    </div>
                    <Button variant="outline" size="lg" className="h-14 text-lg">
                        <GoogleIcon /> Continue with Google
                    </Button>
                     <Button variant="outline" size="lg" className="h-14 text-lg">
                        <KakaoIcon /> Continue with Kakao
                    </Button>
                </div>
            </DialogContent>
        </Dialog>
    );
}
</file>

<file path="src/components/community-chat.tsx">
'use client';

import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Send } from 'lucide-react';

const messages = [
  {
    user: 'CryptoKing',
    avatar: 'https://placehold.co/40x40.png',
    dataAiHint: 'king crown',
    message: 'V-Gauge is spiking! Something big is about to happen.',
    time: '2m ago',
    color: 'text-purple-400',
  },
  {
    user: 'WhaleWatcher',
    avatar: 'https://placehold.co/40x40.png',
    dataAiHint: 'whale ocean',
    message: 'Just saw a massive BTC transfer on the hyperliquid tracker. Coincidence? I think not.',
    time: '1m ago',
    color: 'text-blue-400',
  },
  {
    user: 'DiamondHands',
    avatar: 'https://placehold.co/40x40.png',
    dataAiHint: 'diamond hands',
    message: 'HODL! This is where players are made. Don\'t get shaken out.',
    time: '1m ago',
    color: 'text-green-400',
  },
  {
    user: 'DayTraderPro',
    avatar: 'https://placehold.co/40x40.png',
    dataAiHint: 'chart graph',
    message: '@CryptoKing For sure. ATR on the 15min chart is off the charts. Ranked game starting any second now.',
    time: '30s ago',
    color: 'text-yellow-400',
  },
   {
    user: 'You',
    avatar: 'https://placehold.co/40x40.png',
    dataAiHint: 'user profile',
    message: 'Let\'s go! Ready for this.',
    time: 'now',
    color: 'text-accent',
  },
];

export function CommunityChat() {
  return (
    <Card className="w-full h-full flex flex-col bg-card/50 backdrop-blur-sm border-dashed">
      <CardHeader>
        <CardTitle className="font-headline">Live Community Chat</CardTitle>
      </CardHeader>
      <CardContent className="flex-1 flex flex-col gap-4 overflow-hidden">
        <ScrollArea className="flex-1 pr-4 -mr-4">
          <div className="space-y-6">
            {messages.map((msg, index) => (
              <div key={index} className="flex items-start gap-3">
                <Avatar className="w-8 h-8">
                  <AvatarImage src={msg.avatar} data-ai-hint={msg.dataAiHint} />
                  <AvatarFallback>{msg.user.charAt(0)}</AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <div className="flex items-baseline gap-2">
                    <p className={`font-bold ${msg.color}`}>{msg.user}</p>
                    <time className="text-xs text-muted-foreground">{msg.time}</time>
                  </div>
                  <p className="text-foreground/90">{msg.message}</p>
                </div>
              </div>
            ))}
          </div>
        </ScrollArea>
      </CardContent>
      <CardFooter className="pt-4">
        <div className="relative w-full">
            <Input placeholder="Send a message..." className="pr-12 h-12" />
            <Button variant="ghost" size="icon" className="absolute right-2 top-1/2 -translate-y-1/2 text-accent hover:text-accent-foreground hover:bg-accent">
                <Send className="w-6 h-6" />
            </Button>
        </div>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="src/components/dashboard.tsx">
'use client';

import React, { useState } from 'react';
import { Sidebar, SidebarContent, SidebarFooter, SidebarHeader, SidebarInset, SidebarMenu, SidebarMenuButton, SidebarMenuItem, SidebarProvider, SidebarTrigger } from '@/components/ui/sidebar';
import { Gamepad2, ShieldCheck, Trophy, History, Radio, BotMessageSquare, BookUser, Languages, Database, Users, Waves, Newspaper, Home } from 'lucide-react';
import { Button } from './ui/button';
import { useToast } from '@/hooks/use-toast';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import { UserNav } from './user-nav';
import { VolatilityGauge } from './volatility-gauge';
import { Guide } from './guide';
import { LiquidationTracker } from './liquidation-tracker';
import { HyperliquidTracker } from './hyperliquid-tracker';
import { AISummarizer } from './ai-summarizer';
import { DatasetTables } from './dataset-tables';
import { TradingViewChart } from './trading-view-chart';
import { CommunityChat } from './community-chat';
import { NormalModeBoard } from './normal-mode-board';
import { RankedModeBoard } from './ranked-mode-board';
import { Leaderboard } from './leaderboard';
import { AuthModal } from './auth-modal';
import { HomePage } from './home-page';


const navItems = (lang: 'en' | 'ko') => [
  { name: lang === 'ko' ? '홈' : 'Home', icon: Home, view: 'home' },
  { name: lang === 'ko' ? '랭크 모드' : 'Ranked Mode', icon: Trophy, view: 'ranked' },
  { name: lang === 'ko' ? '일반 모드' : 'Normal Mode', icon: Gamepad2, view: 'normal' },
  { name: lang === 'ko' ? '게임 방법' : 'How to Play', icon: BookUser, view: 'guide' },
  { name: lang === 'ko' ? '리더보드' : 'Leaderboard', icon: ShieldCheck, view: 'leaderboard' },
  { name: lang === 'ko' ? '청산' : 'Liquidations', icon: Radio, view: 'liquidations' },
  { name: lang === 'ko' ? '고래 분석' : 'Whale Analysis', icon: Waves, view: 'hyperliquid' },
  { name: lang === 'ko' ? 'AI 분석' : 'AI Analysis', icon: BotMessageSquare, view: 'ai' },
  { name: lang === 'ko' ? '데이터셋' : 'Datasets', icon: Database, view: 'data' },
];

const content = {
  en: {
    title: 'The e-Sports League for Traders',
    subtitle: 'Where volatility is the start of the game.',
    settings: 'Settings',
    comingSoon: (view: string) => `${view} view coming soon.`
  },
  ko: {
    title: '트레이더를 위한 E-스포츠 리그',
    subtitle: '변동성이 게임의 시작이 되는 곳.',
    settings: '설정',
    comingSoon: (view: string) => `${view} 화면은 준비 중입니다.`
  }
}

export function Dashboard({ lang }: { lang: 'en' | 'ko' }) {
  const [activeView, setActiveView] = useState('home');
  const { toast } = useToast();
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const currentLang = searchParams.get('lang') || 'ko';

  const toggleLanguage = () => {
    const newLang = currentLang === 'en' ? 'ko' : 'en';
    const newSearchParams = new URLSearchParams(searchParams.toString());
    newSearchParams.set('lang', newLang);
    router.replace(`${pathname}?${newSearchParams.toString()}`);
    
    toast({
        title: newLang === 'ko' ? '언어 변경' : 'Language Changed',
        description: newLang === 'ko' ? '이제 한국어로 표시됩니다.' : 'Now displaying in English.',
    });
  }


  const renderContent = () => {
    switch (activeView) {
      case 'home':
        return <HomePage lang={lang} />;
      case 'ranked':
        return <RankedModeBoard lang={lang} />;
      case 'normal':
        return <NormalModeBoard lang={lang} />;
      case 'guide':
        return <Guide lang={lang} />;
      case 'leaderboard':
        return <Leaderboard />;
      case 'liquidations':
        return <LiquidationTracker />;
      case 'hyperliquid':
        return <HyperliquidTracker />;
      case 'ai':
        return <AISummarizer />;
      case 'data':
        return <DatasetTables />;
      default:
        return (
          <div className="flex items-center justify-center h-96">
            <p className="text-muted-foreground">{content[lang].comingSoon(navItems(lang).find(item => item.view === activeView)?.name || '')}</p>
          </div>
        );
    }
  }

  return (
    <SidebarProvider>
      <div className="flex min-h-[calc(100vh-3.5rem)]">
        <Sidebar className="hidden lg:flex flex-col">
          <SidebarHeader>
             <a href="#" className="flex items-center space-x-2">
                <svg width="40" height="40" viewBox="0 0 46 46" fill="none" xmlns="http://www.w3.org/2000/svg" className="h-10 w-10">
                  <circle cx="23" cy="23" r="23" fill="hsl(228 12% 10%)"/>
                  <path d="M23 10C17.4772 10 13 14.4772 13 20C13 27.5 23 36 23 36C23 36 33 27.5 33 20C33 14.4772 28.5228 10 23 10ZM23 24C20.7909 24 19 22.2091 19 20C19 17.7909 20.7909 16 23 16C25.2091 16 27 17.7909 27 20C27 22.2091 25.2091 24 23 24Z" fill="#00A8C6"/>
                  <circle cx="23" cy="20" r="4" fill="hsl(228 12% 10%)"/>
                </svg>
                <span className="font-bold font-logo text-3xl tracking-wider">Coinmap</span>
            </a>
          </SidebarHeader>
          <SidebarContent className="flex-1">
            <SidebarMenu>
              {navItems(lang).map((item) => (
                <SidebarMenuItem key={item.name}>
                  <SidebarMenuButton
                    onClick={() => setActiveView(item.view)}
                    isActive={activeView === item.view}
                    size="lg"
                  >
                    <item.icon className="w-5 h-5" />
                    <span className="text-base">{item.name}</span>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarContent>
           <SidebarFooter>
             <div className="flex items-center justify-center gap-2 p-2">
                <Button variant="ghost" size="icon" onClick={toggleLanguage}>
                    <Languages className="w-6 h-6" />
                </Button>
                <UserNav />
             </div>
          </SidebarFooter>
        </Sidebar>
        <SidebarInset>
          <main className={activeView === 'home' ? 'relative' : 'relative p-4 sm:p-6 lg:p-8'}>
             <div className={activeView === 'home' ? 'absolute top-4 right-4 z-50' : 'flex items-center justify-end mb-8'}>
                <SidebarTrigger className="lg:hidden" />
            </div>

            {activeView === 'home' ? (
              renderContent()
            ) : (
              <div className="space-y-12">
                {renderContent()}
              </div>
            )}
          </main>
        </SidebarInset>
      </div>
    </SidebarProvider>
  );
}
</file>

<file path="src/components/dataset-tables.tsx">
'use client';

import { Card, CardContent } from './ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';

const transactions = [
  { tx_hash: '0x1a2b...ef67', block: 15123456, from: '0xd8dA...8bC', to: '0x7a25...6e48', value: '1.2 WETH', fee: '0.0021 ETH', date: '2023-10-27 10:00:12' },
  { tx_hash: '0x4f5e...cd89', block: 15123455, from: '0x22d4...4d90', to: '0xDeFi...d4e5', value: '5,000 USDC', fee: '0.0053 ETH', date: '2023-10-27 09:58:45' },
  { tx_hash: '0x9a8b...ab12', block: 15123455, from: '0x59ab...d32b', to: '0x1111...1111', value: '10.0 ETH', fee: '0.0019 ETH', date: '2023-10-27 09:58:11' },
  { tx_hash: '0xc3d4...fe34', block: 15123454, from: '0xBuilder...a7d4', to: '0xNFT...7b2e', value: '1 NFT', fee: '0.0120 ETH', date: '2023-10-27 09:55:03' },
  { tx_hash: '0x7e8f...9876', block: 15123453, from: '0xAlice...1a1a', to: '0xBob...b2b2', value: '100 DAI', fee: '0.0033 ETH', date: '2023-10-27 09:54:21' },
];

const blocks = [
  { number: 15123456, timestamp: '2023-10-27 10:00:12', transactions: 152, gasUsed: '14,982,345 (99.8%)', gasLimit: '15,000,000', baseFee: '15.2 Gwei' },
  { number: 15123455, timestamp: '2023-10-27 09:58:45', transactions: 210, gasUsed: '14,991,234 (99.9%)', gasLimit: '15,000,000', baseFee: '14.8 Gwei' },
  { number: 15123454, timestamp: '2023-10-27 09:55:03', transactions: 180, gasUsed: '14,975,678 (99.8%)', gasLimit: '15,000,000', baseFee: '15.1 Gwei' },
  { number: 15123453, timestamp: '2023-10-27 09:54:21', transactions: 195, gasUsed: '14,988,991 (99.9%)', gasLimit: '15,000,000', baseFee: '14.9 Gwei' },
];

export function DatasetTables() {
  return (
     <Card className="bg-card/50 backdrop-blur-sm border-dashed">
      <CardContent className="pt-6">
        <Tabs defaultValue="transactions">
          <TabsList className="grid w-full grid-cols-2 sm:grid-cols-4">
            <TabsTrigger value="transactions">Transactions</TabsTrigger>
            <TabsTrigger value="blocks">Blocks</TabsTrigger>
            <TabsTrigger value="logs">Logs</TabsTrigger>
            <TabsTrigger value="traces">Traces</TabsTrigger>
          </TabsList>
          
          <TabsContent value="transactions" className="mt-4">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Tx Hash</TableHead>
                  <TableHead>Block</TableHead>
                  <TableHead>From</TableHead>
                  <TableHead>To</TableHead>
                  <TableHead className="text-right">Value</TableHead>
                  <TableHead className="text-right">Date (UTC)</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {transactions.map((tx) => (
                  <TableRow key={tx.tx_hash}>
                    <TableCell className="font-code text-accent hover:underline cursor-pointer">{tx.tx_hash}</TableCell>
                    <TableCell>{tx.block}</TableCell>
                    <TableCell className="font-code">{tx.from}</TableCell>
                    <TableCell className="font-code">{tx.to}</TableCell>
                    <TableCell className="text-right font-medium">{tx.value}</TableCell>
                    <TableCell className="text-right text-muted-foreground">{tx.date}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TabsContent>

           <TabsContent value="blocks" className="mt-4">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Block</TableHead>
                  <TableHead>Timestamp</TableHead>
                  <TableHead>Transactions</TableHead>
                  <TableHead>Gas Used</TableHead>
                  <TableHead>Gas Limit</TableHead>
                  <TableHead className="text-right">Base Fee</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {blocks.map((block) => (
                  <TableRow key={block.number}>
                    <TableCell className="font-medium text-accent hover:underline cursor-pointer">{block.number}</TableCell>
                    <TableCell className="text-muted-foreground">{block.timestamp}</TableCell>
                    <TableCell>{block.transactions}</TableCell>
                    <TableCell>{block.gasUsed}</TableCell>
                    <TableCell>{block.gasLimit}</TableCell>
                    <TableCell className="text-right font-code">{block.baseFee}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TabsContent>

          <TabsContent value="logs" className="mt-4 flex items-center justify-center h-64">
            <p className="text-muted-foreground">Log data would be displayed here.</p>
          </TabsContent>
          <TabsContent value="traces" className="mt-4 flex items-center justify-center h-64">
             <p className="text-muted-foreground">Traces data would be displayed here.</p>
          </TabsContent>

        </Tabs>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/guide.tsx">
'use client';

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Activity, Gamepad2, Swords, Trophy, Users, Video, SlidersHorizontal, BarChart2, DollarSign, Bitcoin, Waves, Info, Newspaper, BookOpen } from 'lucide-react';
import { Separator } from './ui/separator';
import { VolatilityGauge } from './volatility-gauge';
import { Button } from './ui/button';

const content = {
  en: {
    mainTitle: 'Coinmap: How to Play',
    mainDescription: 'Welcome to the e-Sports League! This is where you become the player.',
    gaugeTitle: 'What is the Volatility Gauge?',
    gaugeDescription: 'This is Coinmap\'s proprietary on-chart indicator that quantifies the psychological state of market participants—fear and greed—by synthesizing various data points and displaying them visually on the chart.',
    logicTitle: 'Key Calculation Logic',
    logicDescription: 'The F&G index is calculated comprehensively by normalizing the five main indicators below and applying user-defined weights.',
    announcementsTitle: 'Announcements & API Guide',
    whitePaper: 'White Paper',
    announcements: 'Announcements',
    apiGuide: 'API Guide',
  },
  ko: {
    mainTitle: 'TradeOS: 게임 방법',
    mainDescription: 'e-스포츠 리그에 오신 것을 환영합니다! 이곳은 당신이 선수가 되는 곳입니다.',
    gaugeTitle: '변동성 게이지란?',
    gaugeDescription: '이 지표는 여러 데이터를 종합하여 시장 참여자들의 심리 상태, 즉 공포(Fear)와 탐욕(Greed)을 계량화하여 차트 위에 직접 시각적으로 표시해주는 TradeOS의 독자적인 온차트(On-Chart) 지표입니다.',
    logicTitle: '주요 계산 로직',
    logicDescription: 'F&G 지수는 아래 5가지 주요 지표를 정규화하고, 사용자 설정 가중치를 적용하여 종합적으로 계산됩니다.',
    announcementsTitle: '공지사항 & API 가이드',
    whitePaper: '백서',
    announcements: '공지사항',
    apiGuide: 'API 가이드',
  },
};


const guideSteps = (lang: 'en' | 'ko') => [
  {
    icon: Activity,
    title: lang === 'ko' ? '1. 변동성 게이지를 확인하세요' : '1. Check the Volatility Gauge',
    description: lang === 'ko' ? '시장의 긴장감을 나타내는 심장박동입니다. 게이지가 높아질수록 시장의 변동성이 커지며, 랭크 게임 시작이 가까워졌음을 의미합니다.' : 'It\'s the heartbeat that shows market tension. The higher the gauge, the greater the market volatility, signaling that a ranked game is approaching.',
  },
  {
    icon: Swords,
    title: lang === 'ko' ? '2. 랭크 게임에 참여하세요' : '2. Join the Ranked Game',
    description: lang === 'ko' ? '변동성 게이지가 폭발하면 랭크 게임이 시작됩니다! 시즌제로 운영되며, 티어는 수익률뿐만 아니라 안정성과 같은 지표로 결정됩니다.' : 'When the volatility gauge explodes, the ranked game begins! It operates on a seasonal basis, and your tier is determined not just by profit, but by metrics like stability.',
  },
    {
    icon: Trophy,
    title: lang === 'ko' ? '3. 티어를 획득하고 증명하세요' : '3. Earn and Prove Your Tier',
    description: lang === 'ko' ? '브론즈부터 챌린저까지, 당신의 트레이딩 실력을 증명하세요. 시즌 종료 시 특별한 보상이 기다립니다.' : 'From Bronze to Challenger, prove your trading skills. Special rewards await at the end of the season.',
  },
  {
    icon: Gamepad2,
    title: lang === 'ko' ? '4. 일반 모드에서 연습하세요' : '4. Practice in Normal Mode',
    description: lang === 'ko' ? '랭크 게임이 아닐 때는 일반 모드에서 자유롭게 트레이딩 전략을 테스트하고 실력을 갈고 닦을 수 있습니다.' : 'When it\'s not a ranked game, you can freely test your trading strategies and hone your skills in normal mode.',
  },
];

const gaugeComponents = (lang: 'en' | 'ko') => [
  {
    icon: SlidersHorizontal,
    title: lang === 'ko' ? '가격-이동평균 이격도' : 'Price-MA Divergence',
  },
  {
    icon: BarChart2,
    title: lang === 'ko' ? '수익률' : 'Rate of Return',
  },
  {
    icon: DollarSign,
    title: lang === 'ko' ? '자금 흐름' : 'Money Flow',
  },
  {
    icon: Waves,
    title: lang === 'ko' ? '변동성 (ATR)' : 'Volatility (ATR)',
  },
  {
    icon: Bitcoin,
    title: lang === 'ko' ? 'BTC 도미넌스' : 'BTC Dominance',
  }
];

export function Guide({ lang }: { lang: 'en' | 'ko' }) {
  const currentContent = content[lang];
  const currentGuideSteps = guideSteps(lang);
  const currentGaugeComponents = gaugeComponents(lang);
  
  return (
    <section id="guide">
        <div className="text-center mb-12">
            <h2 className="text-4xl font-bold font-headline text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-accent to-blue-400">
                {currentContent.mainTitle}
            </h2>
            <p className="mt-4 text-lg text-muted-foreground">
                {currentContent.mainDescription}
            </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="space-y-8">
                {currentGuideSteps.map((step, index) => (
                    <Card key={index} className="bg-card/50 backdrop-blur-sm border-dashed hover:border-solid hover:border-accent transition-all duration-300 transform hover:-translate-y-1">
                        <CardHeader className="flex flex-row items-center gap-4">
                            <div className="bg-accent/20 p-3 rounded-full">
                            <step.icon className="w-8 h-8 text-accent" />
                            </div>
                            <CardTitle className="font-headline text-2xl">{step.title}</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <p className="text-muted-foreground">{step.description}</p>
                        </CardContent>
                    </Card>
                ))}
            </div>
            <div className="space-y-8">
                 <Card className="bg-card/50 backdrop-blur-sm border-dashed p-6">
                    <h3 className="font-headline text-2xl mb-4 text-accent flex items-center gap-2">
                      <BookOpen className="w-6 h-6" />
                      {currentContent.whitePaper}
                    </h3>
                    <p className="text-muted-foreground mb-4">Read our white paper to get a deep-dive on the protocol and the vision.</p>
                     <Button>Read White Paper</Button>
                </Card>
                <Card className="bg-card/50 backdrop-blur-sm border-dashed p-6">
                    <h3 className="font-headline text-2xl mb-4 text-accent flex items-center gap-2">
                      <Newspaper className="w-6 h-6" />
                      {currentContent.announcementsTitle}
                    </h3>
                    <ul className="space-y-3 text-muted-foreground">
                        <li className="hover:text-foreground cursor-pointer font-semibold text-foreground/90">[Update] v1.2 Patch Notes - New MMR calculation</li>
                        <li className="hover:text-foreground cursor-pointer">[API] How to connect to the MCP API</li>
                        <li className="hover:text-foreground cursor-pointer">[Event] Season 3 start date announced!</li>
                        <li className="hover:text-foreground cursor-pointer">[System] Scheduled maintenance on 2024-08-01</li>
                    </ul>
                </Card>
            </div>
        </div>

        <Separator className="my-16" />
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 items-start">
            <div className="space-y-4">
                 <h2 className="text-4xl font-bold font-headline text-transparent bg-clip-text bg-gradient-to-r from-blue-400 via-accent to-purple-400 mb-4">
                    {currentContent.gaugeTitle}
                </h2>
                <p className="mt-4 text-lg text-muted-foreground max-w-2xl">
                    {currentContent.gaugeDescription}
                </p>
                 <Card className="bg-card/50 backdrop-blur-sm p-6 max-w-2xl">
                   <h3 className="font-headline text-2xl mb-4 text-accent">{currentContent.logicTitle}</h3>
                   <p className="text-muted-foreground mb-6">
                        {currentContent.logicDescription}
                   </p>
                   <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                        {currentGaugeComponents.map((component, index) => (
                            <div key={index} className="flex items-center gap-2">
                                <div className="bg-accent/20 p-2 rounded-md">
                                    <component.icon className="w-5 h-5 text-accent" />
                                </div>
                                <span className="font-medium">{component.title}</span>
                            </div>
                        ))}
                   </div>
                </Card>
            </div>
            <div className="mt-12 md:mt-0">
                <VolatilityGauge lang={lang} />
            </div>
        </div>
    </section>
  );
}
</file>

<file path="src/components/hero-animation.tsx">
import React from 'react';

export const HeroAnimation = () => {
  const pathData = "M-28.5 259.5C148.2 259.5 248.5 137 400.5 137C552.5 137 622.5 362.5 768 362.5C913.5 362.5 978 48.5 1125 48.5C1272 48.5 1380 100 1440 -50";

  return (
    <div className="absolute inset-x-0 bottom-0 z-0 h-full overflow-hidden pointer-events-none">
      <div className="absolute inset-0 animate-pulse-glow">
        <svg
          className="absolute bottom-0 left-1/2 -translate-x-1/2 w-[250%] max-w-none h-auto text-primary"
          viewBox="0 -60 1440 380"
          xmlns="http://www.w3.org/2000/svg"
          preserveAspectRatio="xMidYMax meet"
        >
          <defs>
            <linearGradient id="moon-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
              <stop offset="0%" stopColor="currentColor" stopOpacity="0.7" />
              <stop offset="50%" stopColor="currentColor" stopOpacity="0.7" />
              <stop offset="100%" stopColor="currentColor" stopOpacity="0" />
            </linearGradient>
          </defs>
          
          {/* Glow path */}
          <path
            d={pathData}
            stroke="url(#moon-gradient)"
            strokeWidth="10"
            fill="none"
            className="opacity-30"
          />
          
          {/* Main path */}
          <path
            d={pathData}
            stroke="url(#moon-gradient)"
            strokeWidth="3"
            fill="none"
          />
        </svg>
      </div>
    </div>
  );
};
</file>

<file path="src/components/home-page.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  TrendingUp, 
  TrendingDown, 
  Trophy, 
  Target, 
  Zap, 
  Shield, 
  Activity,
  BarChart3,
  Users,
  Award,
  Star,
  ArrowRight,
  Play,
  ChevronDown,
  Clock,
  Timer,
  Gamepad2,
  Crown,
  Medal,
  Gift,
  Calendar,
  AlertTriangle,
  TrendingUp as TrendingUpIcon,
  Sparkles,
  CheckCircle,
  ArrowUpRight
} from 'lucide-react';
import { VolatilityGauge } from '@/components/volatility-gauge';
import { HeroAnimation } from '@/components/hero-animation';

export function HomePage({ lang }: { lang: 'en' | 'ko' }) {
  const [showHero, setShowHero] = useState(false);
  const [showDemo, setShowDemo] = useState(false);
  const [volatilityLevel, setVolatilityLevel] = useState(0);
  const [countdown, setCountdown] = useState({ hours: 2, minutes: 15, seconds: 30 });

  useEffect(() => {
    // Hero 애니메이션
    const timer1 = setTimeout(() => setShowHero(true), 500);
    const timer2 = setTimeout(() => setShowDemo(true), 1500);

    return () => {
      clearTimeout(timer1);
      clearTimeout(timer2);
    };
  }, []);

  useEffect(() => {
    // Volatility 레벨 애니메이션
    const interval = setInterval(() => {
      setVolatilityLevel(prev => (prev + 1) % 4);
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    // 카운트다운 타이머
    const timer = setInterval(() => {
      setCountdown(prev => {
        let { hours, minutes, seconds } = prev;
        seconds--;
        
        if (seconds < 0) {
          seconds = 59;
          minutes--;
          if (minutes < 0) {
            minutes = 59;
            hours--;
            if (hours < 0) {
              hours = 23;
            }
          }
        }
        
        return { hours, minutes, seconds };
      });
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  const getVolatilityData = () => {
    const levels = [
      { level: lang === 'ko' ? '낮음' : 'Low', value: 25, color: 'from-green-500 to-green-400', bgColor: 'bg-green-500' },
      { level: lang === 'ko' ? '보통' : 'Medium', value: 50, color: 'from-yellow-500 to-yellow-400', bgColor: 'bg-yellow-500' },
      { level: lang === 'ko' ? '높음' : 'High', value: 75, color: 'from-orange-500 to-orange-400', bgColor: 'bg-orange-500' },
      { level: lang === 'ko' ? '매우 높음' : 'Very High', value: 95, color: 'from-red-500 to-red-400', bgColor: 'bg-red-500' }
    ];
    return levels[volatilityLevel];
  };

  const volatilityData = getVolatilityData();

  const quickFeatures = [
    {
      icon: <Trophy className="w-5 h-5" />,
      title: lang === 'ko' ? '실시간 랭킹' : 'Live Rankings',
      description: lang === 'ko' ? '실시간 성과 추적' : 'Real-time performance tracking'
    },
    {
      icon: <Zap className="w-5 h-5" />,
      title: lang === 'ko' ? '빠른 거래' : 'Quick Trading',
      description: lang === 'ko' ? '원클릭 거래 실행' : 'One-click trading'
    },
    {
      icon: <Shield className="w-5 h-5" />,
      title: lang === 'ko' ? '안전한 거래' : 'Safe Trading',
      description: lang === 'ko' ? '리스크 관리 도구' : 'Risk management tools'
    }
  ];

  const keyBenefits = [
    {
      icon: <Sparkles className="w-6 h-6" />,
      title: lang === 'ko' ? '게임화된 경험' : 'Gamified Experience',
      description: lang === 'ko' ? '레벨업, 업적, 랭킹으로 거래를 재미있게' : 'Make trading fun with levels, achievements, and rankings',
      color: 'from-purple-500 to-pink-500'
    },
    {
      icon: <Target className="w-6 h-6" />,
      title: lang === 'ko' ? '실시간 시장 분석' : 'Real-time Market Analysis',
      description: lang === 'ko' ? '변동성 게이지와 시장 지표로 최적의 타이밍 포착' : 'Capture optimal timing with volatility gauge and market indicators',
      color: 'from-blue-500 to-cyan-500'
    },
    {
      icon: <Crown className="w-6 h-6" />,
      title: lang === 'ko' ? '실전 대회' : 'Real Competitions',
      description: lang === 'ko' ? 'FOMC, CPI 등 이벤트 기반 실전 투자 대회' : 'Real trading competitions based on events like FOMC, CPI',
      color: 'from-yellow-500 to-orange-500'
    }
  ];

  return (
    <div className="w-full min-h-screen">
      {/* Hero Section - Simplified */}
      <section className="relative w-full h-screen flex justify-center overflow-hidden pt-32">
        {/* Background Animation */}
        <div className="absolute inset-0 z-0">
          <div className="absolute inset-0 bg-background" />
          <div className="absolute inset-0 bg-grid-white/[0.02] bg-[size:50px_50px]" />
          <HeroAnimation />
        </div>

        <div className="relative z-10 container mx-auto px-4">
          <div className="flex flex-col items-center gap-12 text-center">
            {/* Top section: Headline & CTA */}
            <div className={`max-w-3xl transition-all duration-1000 ${
              showHero ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
            }`}>
              <div className="space-y-2">
                <Badge variant="secondary" className="bg-primary/10 text-primary border-primary/20">
                  {lang === 'ko' ? '게이머와 트레이더를 위한 궁극의 필드' : 'The Ultimate Arena for Gamers & Traders'}
                </Badge>
                <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent">
                  {lang === 'ko' ? '시장의 리듬을 정복하라' : 'Conquer the Rhythm of the Market'}
                </h1>
                <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
                  {lang === 'ko' ? '변동성은 단순한 데이터가 아니라, 당신의 다음 레벨입니다. Coinmap의 랭킹 시스템과 실시간 게이지로 시장의 흐름을 지배하세요.' : "Volatility isn't just data; it's your next level. Dominate the market's flow with Coinmap's ranking system and live gauges."}
                </p>
              </div>
              
              <div className="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
                <Button size="lg" className="text-lg px-8 py-6 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 shadow-lg shadow-primary/20">
                  <Play className="w-5 h-5 mr-2" />
                  {lang === 'ko' ? '게임 시작하기' : 'Enter the Arena'}
                </Button>
                <Button variant="outline" size="lg" className="text-lg px-8 py-6">
                  {lang === 'ko' ? '플레이 방법 보기' : 'How to Play'}
                </Button>
              </div>
            </div>

            {/* Bottom section: Live Demos */}
            <div className={`w-full max-w-5xl transition-all duration-1000 delay-500 ${
              showDemo ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
            }`}>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card className="bg-card/50 backdrop-blur-lg border-border/20 shadow-2xl shadow-primary/10">
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Activity className="w-5 h-5 text-primary" />
                        <span>{lang === 'ko' ? '실시간 변동성 게이지' : 'Live Volatility Gauge'}</span>
                      </div>
                      <Badge variant="destructive" className="animate-pulse">
                        {volatilityData.level}
                      </Badge>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <VolatilityGauge lang={lang} />
                  </CardContent>
                </Card>

                <Card className="bg-card/50 backdrop-blur-lg border-border/20 shadow-2xl shadow-primary/10">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Trophy className="w-5 h-5 text-primary" />
                      {lang === 'ko' ? '다음 랭크 게임' : 'Next Ranked Game'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {/* Auto-Join Events */}
                    <p className="text-xs text-muted-foreground uppercase font-semibold tracking-wider">{lang === 'ko' ? '주요 경제 지표' : 'Key Economic Indicators'}</p>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between p-2 rounded-lg bg-background/50">
                        <p className="text-sm font-semibold">{lang === 'ko' ? '12월 FOMC' : 'December FOMC'}</p>
                        <Badge variant="secondary" className="text-xs">{lang === 'ko' ? '자동 참가' : 'Auto-join'}</Badge>
                      </div>
                      <div className="flex items-center justify-between p-2 rounded-lg bg-background/50">
                        <p className="text-sm font-semibold">{lang === 'ko' ? '12월 CPI 발표' : 'CPI Release'}</p>
                        <Badge variant="secondary" className="text-xs">{lang === 'ko' ? '자동 참가' : 'Auto-join'}</Badge>
                      </div>
                      <div className="flex items-center justify-between p-2 rounded-lg bg-background/50">
                        <p className="text-sm font-semibold">{lang === 'ko' ? '비농업고용지수' : 'Non-Farm Payroll'}</p>
                        <Badge variant="secondary" className="text-xs">{lang === 'ko' ? '자동 참가' : 'Auto-join'}</Badge>
                      </div>
                      <div className="flex items-center justify-between p-2 rounded-lg bg-background/50">
                        <p className="text-sm font-semibold">{lang === 'ko' ? '생산자물가지수 (PPI)' : 'Producer Price Index (PPI)'}</p>
                        <Badge variant="secondary" className="text-xs">{lang === 'ko' ? '자동 참가' : 'Auto-join'}</Badge>
                      </div>
                    </div>

                    {/* Divider */}
                    <div className="pt-2">
                      <p className="text-xs text-muted-foreground uppercase font-semibold tracking-wider">{lang === 'ko' ? '특별 토너먼트' : 'Special Tournaments'}</p>
                    </div>

                    {/* Special Events */}
                    <div className="space-y-2">
                      <div className="flex items-center justify-between p-3 rounded-lg bg-blue-500/10">
                        <div>
                          <p className="text-sm font-semibold text-blue-400">{lang === 'ko' ? '주말 변동성 사냥' : 'Weekend Volatility Hunt'}</p>
                          <p className="text-xs text-muted-foreground">{lang === 'ko' ? '매주' : 'Weekly'}: <span className="text-blue-400 font-bold">$10,000</span></p>
                        </div>
                        <Button size="sm" variant="outline" className="border-blue-400/50 text-blue-400 hover:bg-blue-400/10 hover:text-blue-300">
                          {lang === 'ko' ? '참가' : 'Join'}
                        </Button>
                      </div>
                      <div className="flex items-center justify-between p-3 rounded-lg bg-purple-500/10">
                        <div>
                          <p className="text-sm font-semibold text-purple-400">{lang === 'ko' ? '2025년 12월 매억남 챔피언십' : 'Dec 2025 MUN Championship'}</p>
                          <p className="text-xs text-muted-foreground">{lang === 'ko' ? '총 상금' : 'Total Prize'}: <span className="text-purple-400 font-bold">$250,000</span></p>
                        </div>
                        <Button size="sm" className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600">
                          {lang === 'ko' ? '사전 등록' : 'Pre-register'}
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Benefits Section */}
      <section className="py-24 bg-muted/20">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent">
              {lang === 'ko' ? '경험의 차이를 만들다' : 'An Unfair Advantage'}
            </h2>
            <p className="text-lg text-muted-foreground mt-4 max-w-3xl mx-auto">
              {lang === 'ko' ? 'Coinmap은 단순한 거래 플랫폼이 아닙니다. 시장의 모든 움직임을 당신의 승리로 바꾸는 강력한 무기입니다.' : 'Coinmap is more than a trading platform. It’s an arsenal of powerful tools designed to turn every market move into your victory.'}
            </p>
          </div>
          <div className="grid md:grid-cols-3 gap-8">
            {keyBenefits.map((benefit, index) => (
              <div key={index} className="group relative p-8 rounded-2xl bg-card/50 border border-border/20 overflow-hidden transition-all duration-300 hover:border-primary/50 hover:shadow-2xl hover:shadow-primary/10">
                 <div className="absolute -inset-px rounded-2xl bg-gradient-to-r from-primary/50 to-blue-500/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                 <div className="relative">
                    <div className={`w-16 h-16 rounded-xl bg-gradient-to-r ${benefit.color} flex items-center justify-center text-white mb-6 group-hover:scale-110 transition-transform duration-300`}>
                        {React.cloneElement(benefit.icon, { className: 'w-8 h-8' })}
                    </div>
                    <h3 className="text-2xl font-bold mb-4">{benefit.title}</h3>
                    <p className="text-muted-foreground leading-relaxed">{benefit.description}</p>
                 </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* How it Works Section */}
      <section className="py-24">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent">
              {lang === 'ko' ? '게임의 법칙' : 'The Rules of the Game'}
            </h2>
            <p className="text-lg text-muted-foreground mt-4 max-w-3xl mx-auto">
              {lang === 'ko' ? '승리를 위한 간단한 3단계 가이드.' : 'A simple, three-step guide to victory.'}
            </p>
          </div>
          
          <div className="space-y-24">
            {/* Step 1: Normal Trading */}
            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="text-center md:text-left">
                <Badge>{lang === 'ko' ? '1단계' : 'Step 1'}</Badge>
                <h3 className="text-3xl font-bold mt-4 mb-4">{lang === 'ko' ? '시즌 점수 누적' : 'Accumulate Season Score'}</h3>
                <p className="text-muted-foreground text-lg">
                  {lang === 'ko' ? '평상시에는 일반 모드에서 거래하며 시즌 랭킹을 위한 포인트를 꾸준히 쌓습니다. 모든 거래가 당신의 최종 순위에 기여합니다.' : 'During normal periods, trade in Normal Mode to consistently build points for your season ranking. Every trade contributes to your final standing.'}
                </p>
              </div>
              <div className="relative h-64 flex items-center justify-center">
                 <div className="absolute w-48 h-48 bg-blue-500/10 rounded-full blur-2xl"></div>
                 <Trophy className="w-24 h-24 text-blue-500 relative z-10"/>
              </div>
            </div>

            {/* Step 2: Ranked Mode */}
            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="relative h-64 flex items-center justify-center md:order-2">
                 <div className="absolute w-48 h-48 bg-red-500/10 rounded-full blur-2xl"></div>
                 <Zap className="w-24 h-24 text-red-500 relative z-10"/>
              </div>
              <div className="text-center md:text-left md:order-1">
                <Badge>{lang === 'ko' ? '2단계' : 'Step 2'}</Badge>
                <h3 className="text-3xl font-bold mt-4 mb-4">{lang === 'ko' ? '랭크 게임 참전' : 'Enter Ranked Games'}</h3>
                <p className="text-muted-foreground text-lg">
                  {lang === 'ko' ? '주요 경제 지표 발표와 같은 높은 변동성 기간에는 자동으로 랭크 게임이 시작됩니다. 이 기간 동안의 성과는 시즌 점수에 큰 영향을 미칩니다.' : 'During periods of high volatility, like major economic announcements, Ranked Games will automatically begin. Performance during these games has a major impact on your season score.'}
                </p>
              </div>
            </div>

            {/* Step 3: Championship */}
            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="text-center md:text-left">
                <Badge>{lang === 'ko' ? '3단계' : 'Step 3'}</Badge>
                <h3 className="text-3xl font-bold mt-4 mb-4">{lang === 'ko' ? '챔피언십 도전' : 'Challenge for the Championship'}</h3>
                <p className="text-muted-foreground text-lg">
                  {lang === 'ko' ? '시즌이 끝나면 상위 랭커들이 최종 챔피언십에 진출하여 막대한 상금을 놓고 경쟁합니다. 최고의 트레이더가 될 준비가 되셨나요?' : 'At the end of the season, top-ranked players will advance to the final Championship to compete for massive prizes. Are you ready to become the best?'}
                </p>
              </div>
              <div className="relative h-64 flex items-center justify-center">
                 <div className="absolute w-48 h-48 bg-purple-500/10 rounded-full blur-2xl"></div>
                 <Crown className="w-24 h-24 text-purple-500 relative z-10"/>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Final CTA Section */}
      <section className="py-24 relative overflow-hidden">
        <div className="absolute inset-0 z-0">
          <HeroAnimation />
        </div>
        <div className="container mx-auto px-4 text-center relative z-10">
          <h2 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent mb-4">
              {lang === 'ko' ? '지금, 당신의 실력을 증명하세요' : 'Your Arena Awaits'}
          </h2>
          <p className="text-lg text-muted-foreground mb-8 max-w-2xl mx-auto">
              {lang === 'ko' ? '지금 바로 가입하여 랭킹에 이름을 올리고, 변동성의 리듬을 정복하세요.' : 'Join now to get on the leaderboard, conquer the rhythm of volatility, and prove your skill.'}
          </p>
          <Button size="lg" className="text-lg px-8 py-6 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 shadow-lg shadow-primary/20 scale-105 hover:scale-110 transition-transform duration-300">
            <Play className="w-5 h-5 mr-2" />
            {lang === 'ko' ? '무료로 게임 시작' : 'Enter the Game for Free'}
          </Button>
        </div>
      </section>
    </div>
  );
}
</file>

<file path="src/components/hyperliquid-tracker.tsx">
'use client';

import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';
import { useState } from 'react';
import { PlayerProfile } from './player-profile';


const whaleTrades = [
  {
    address: '0x5d83...4fb6',
    symbol: 'BTC',
    side: 'Long',
    positionUsd: '1,250,432.10',
    entryPrice: '67,774.00',
    liqPrice: '61,234.50',
    pnl: '+24,567.80',
    leverage: '10x',
    type: 'Isolated',
    timestamp: '2m ago',
    logo: 'https://placehold.co/40x40.png',
    dataAiHint: 'crypto bitgo',
    tag: 'Position Increase',
    tagVariant: 'secondary'
  },
  {
    address: '0x20c2...44f5',
    symbol: 'ETH',
    side: 'Short',
    positionUsd: '850,212.50',
    entryPrice: '3,550.00',
    liqPrice: '3,890.10',
    pnl: '-5,123.45',
    leverage: '5x',
    type: 'Cross',
    timestamp: '5m ago',
    logo: 'https://placehold.co/40x40.png',
    dataAiHint: 'anonymous whale',
    tag: 'New High-Risk Short',
    tagVariant: 'destructive'
  },
    {
    address: '0xfae9...3571',
    symbol: 'SOL',
    side: 'Long',
    positionUsd: '550,000.00',
    entryPrice: '164.00',
    liqPrice: '148.50',
    pnl: '+12,321.00',
    leverage: '10x',
    type: 'Isolated',
    timestamp: '12m ago',
    logo: 'https://placehold.co/40x40.png',
    dataAiHint: 'solana coin',
    tag: 'Investment Opportunity',
    tagVariant: 'default'
  },
];

export function HyperliquidTracker() {
  const [selectedAddress, setSelectedAddress] = useState<string | null>(null);

  if (selectedAddress) {
      return (
          <div>
              <Button onClick={() => setSelectedAddress(null)} className="mb-4">
                  &larr; Back to Whale Analysis
              </Button>
              <PlayerProfile />
          </div>
      );
  }

  return (
    <Card className="bg-card/50 backdrop-blur-sm border-dashed">
        <CardHeader>
            <CardTitle className="font-headline">Hyperliquid Whale Feed</CardTitle>
        </CardHeader>
        <CardContent>
            <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium">Key Wallet Signals</h3>
                <div className="flex gap-2">
                    <Button variant="ghost" size="sm" className="bg-accent/50">All</Button>
                    <Button variant="ghost" size="sm">High Risk</Button>
                    <Button variant="ghost" size="sm">Warning Sign</Button>
                    <Button variant="ghost" size="sm">Investment Opportunity</Button>
                </div>
            </div>
            <div className="space-y-4">
                {whaleTrades.map((tx, index) => (
                    <div key={index} className="flex items-center justify-between p-3 rounded-lg hover:bg-muted/30 transition-colors cursor-pointer" onClick={() => setSelectedAddress(tx.address)}>
                    <div className="flex items-center gap-4">
                        <Avatar>
                        <AvatarImage src={tx.logo} data-ai-hint={tx.dataAiHint} />
                        <AvatarFallback>{tx.address.charAt(0)}</AvatarFallback>
                        </Avatar>
                        <div>
                        <p className="font-semibold">
                            {tx.address}
                        </p>
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                            <span>{tx.timestamp}</span>
                            <Badge variant={tx.tagVariant as any}>{tx.tag}</Badge>
                        </div>
                        </div>
                    </div>
                    <div>
                      <p className={`font-mono text-lg text-right ${tx.pnl.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>
                        {tx.side} {tx.symbol} {tx.pnl}
                      </p>
                      <p className="text-sm text-muted-foreground text-right">
                        Value: ${tx.positionUsd}
                      </p>
                    </div>
                    </div>
                ))}
            </div>
        </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/leaderboard.tsx">
'use client';

import { useState } from 'react';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { PlayerProfile } from './player-profile';
import { Crown, Shield, Users } from 'lucide-react';
import { Badge } from './ui/badge';
import { Area, AreaChart, Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from 'recharts';

const rankedData = [
  { rank: 1, name: 'Gen.G Esports', league: 'LCK', points: 1617, record: '28-4 (.875)', avatar: 'https://placehold.co/40x40.png', dataAiHint: 'esports logo GenG', isInternational: true, trend: [{v: 1580}, {v: 1595}, {v: 1590}, {v: 1605}, {v: 1617}] },
  { rank: 2, name: 'T1', league: 'LCK', points: 1561, record: '21-11 (.656)', avatar: 'https://placehold.co/40x40.png', dataAiHint: 'esports logo T1', isInternational: true, trend: [{v: 1550}, {v: 1545}, {v: 1555}, {v: 1565}, {v: 1561}] },
  { rank: 3, name: 'Anyone\'s Legend', league: 'LPL', points: 1558, record: '30-9 (.769)', avatar: 'https://placehold.co/40x40.png', dataAiHint: 'esports logo AL', isInternational: false, trend: [{v: 1520}, {v: 1530}, {v: 1545}, {v: 1550}, {v: 1558}] },
  { rank: 4, name: 'Hanwha Life Esports', league: 'LCK', points: 1555, record: '28-8 (.778)', avatar: 'https://placehold.co/40x40.png', dataAiHint: 'esports logo HLE', isInternational: false, trend: [{v: 1560}, {v: 1550}, {v: 1540}, {v: 1545}, {v: 1555}] },
  { rank: 5, name: 'BILIBILI GAMING', league: 'LPL', points: 1492, record: '28-13 (.683)', avatar: 'https://placehold.co/40x40.png', dataAiHint: 'esports logo BLG', isInternational: true, trend: [{v: 1480}, {v: 1485}, {v: 1495}, {v: 1490}, {v: 1492}] },
];

const normalData = [
    { rank: 1, name: 'CryptoKing', profit: '+1,254.3%', address: '0xabc...def', avatar: 'https://placehold.co/40x40.png', dataAiHint: 'king crown' },
    { rank: 2, name: 'WhaleWatcher', profit: '+987.1%', address: '0x123...456', avatar: 'https://placehold.co/40x40.png', dataAiHint: 'whale ocean' },
    { rank: 3, name: 'DiamondHands', profit: '+850.5%', address: '0x789...abc', avatar: 'https://placehold.co/40x40.png', dataAiHint: 'diamond hands' },
]

export function Leaderboard() {
  const [selectedAddress, setSelectedAddress] = useState<string | null>(null);

  if (selectedAddress) {
      return (
          <div>
              <Button onClick={() => setSelectedAddress(null)} className="mb-4">
                  &larr; Back to Leaderboard
              </Button>
              <PlayerProfile />
          </div>
      );
  }

  return (
    <div className="grid grid-cols-1 xl:grid-cols-4 gap-8">
      <div className="xl:col-span-3">
         <Tabs defaultValue="ranked">
            <div className="flex justify-between items-center mb-4">
                <TabsList>
                    <TabsTrigger value="ranked">Ranked Mode</TabsTrigger>
                    <TabsTrigger value="normal">Normal Mode</TabsTrigger>
                    <TabsTrigger value="teams">Teams</TabsTrigger>
                </TabsList>
                <Button>Create a Team</Button>
            </div>
            <TabsContent value="ranked">
                <Card className="bg-card/50 backdrop-blur-sm">
                <CardHeader>
                    <CardTitle className="font-headline">Global Power Rankings</CardTitle>
                    <CardDescription>Powered by TradeOS AI Engine. Updated: 2024-07-23 03:00</CardDescription>
                </CardHeader>
                <CardContent>
                    <Table>
                    <TableHeader>
                        <TableRow>
                        <TableHead className="w-16 text-center">#</TableHead>
                        <TableHead>Team</TableHead>
                        <TableHead className="w-32 text-center">Trend</TableHead>
                        <TableHead className="text-right">Points</TableHead>
                        <TableHead className="text-center">W/L</TableHead>
                        <TableHead className="text-center">International</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {rankedData.map((player) => (
                        <TableRow key={player.rank} className="cursor-pointer hover:bg-muted/30" onClick={() => setSelectedAddress(player.name)}>
                            <TableCell className="font-bold text-lg text-center">{player.rank}</TableCell>
                            <TableCell>
                            <div className="flex items-center gap-3">
                                <Avatar className="w-8 h-8">
                                <AvatarImage src={player.avatar} data-ai-hint={player.dataAiHint} />
                                <AvatarFallback>{player.name.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <div>
                                    <p className="font-semibold">{player.name}</p>
                                    <p className="text-xs text-muted-foreground">{player.league}</p>
                                </div>
                            </div>
                            </TableCell>
                            <TableCell>
                                <div className="h-8 w-24 mx-auto">
                                <ResponsiveContainer width="100%" height="100%">
                                    <BarChart data={player.trend} margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>
                                    <Bar dataKey="v" fill={player.trend[player.trend.length-1].v > player.trend[0].v ? 'hsl(var(--chart-2))' : 'hsl(var(--chart-1))'} />
                                    </BarChart>
                                </ResponsiveContainer>
                                </div>
                            </TableCell>
                            <TableCell className="text-right font-mono font-bold text-accent">{player.points} pts</TableCell>
                            <TableCell className="text-center font-mono">{player.record}</TableCell>
                            <TableCell className="text-center">
                                {player.isInternational && (
                                  <div className="flex justify-center gap-2">
                                      <Badge variant="outline" className="border-yellow-400/50 text-yellow-300">
                                          <Crown className="w-4 h-4 mr-1"/> Worlds
                                      </Badge>
                                  </div>
                                )}
                            </TableCell>
                        </TableRow>
                        ))}
                    </TableBody>
                    </Table>
                </CardContent>
                </Card>
            </TabsContent>
            <TabsContent value="normal">
                {/* Placeholder for Normal Mode Leaderboard */}
                 <Card className="bg-card/50 backdrop-blur-sm">
                    <CardHeader>
                        <CardTitle className="font-headline">Normal Mode Leaderboard</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Rank</TableHead>
                                    <TableHead>Player</TableHead>
                                    <TableHead className="text-right">Profit %</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                            {normalData.map((player) => (
                                <TableRow key={player.rank} onClick={() => setSelectedAddress(player.address)} className="cursor-pointer hover:bg-muted/30">
                                    <TableCell>{player.rank}</TableCell>
                                    <TableCell>
                                        <div className="flex items-center gap-3">
                                            <Avatar className="w-8 h-8"><AvatarImage src={player.avatar} data-ai-hint={player.dataAiHint} /></Avatar>
                                            {player.name}
                                        </div>
                                    </TableCell>
                                    <TableCell className="text-right text-green-400 font-mono">{player.profit}</TableCell>
                                </TableRow>
                            ))}
                            </TableBody>
                        </Table>
                    </CardContent>
                 </Card>
            </TabsContent>
            <TabsContent value="teams">
                {/* Placeholder for Teams Leaderboard */}
                 <div className="text-center py-16 text-muted-foreground">Team rankings coming soon!</div>
            </TabsContent>
        </Tabs>
      </div>

      <div className="xl:col-span-1 space-y-6">
        <Card className="bg-card/50 backdrop-blur-sm">
            <CardHeader>
                <CardTitle className="font-headline text-lg">Power Rankings Explained</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 text-sm text-muted-foreground">
                <p>1-tier team power rankings are calculated by summing points from the following categories.</p>
                <div className="space-y-2 border-t border-border pt-4">
                   <div className="font-semibold text-foreground">Team Match Result Points</div>
                   <p>⚔️ Opponent's Strength: Power score difference</p>
                   <p>📈 Win Score Difference: Match win/loss</p>
                   <p>💥 Upset Bonus: e.g., Worlds Playoffs > Regular Season</p>
                </div>
                 <div className="space-y-2 border-t border-border pt-4">
                    <div className="font-semibold text-foreground">Regional League Power</div>
                     <p>LCK: 1755, LPL: 1604, LEC: 1341...</p>
                </div>
                 <div className="space-y-2 border-t border-border pt-4">
                    <div className="font-semibold text-foreground">International Competition Results</div>
                     <Button variant="link" className="p-0 h-auto">Learn More</Button>
                </div>
            </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="src/components/liquidation-tracker.tsx">
'use client';

import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
import { Button } from './ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';

const liquidationStats = [
    { period: '1H', total: '$7.43M', longs: '$4.13M', shorts: '$3.29M' },
    { period: '4H', total: '$26.84M', longs: '$11.46M', shorts: '$15.38M' },
    { period: '12H', total: '$101.84M', longs: '$41.46M', shorts: '$60.38M' },
    { period: '1D', total: '$315.27M', longs: '$202.72M', shorts: '$112.54M' },
];

const recentLiquidations = [
    { exchange: 'Binance', symbol: 'ETHUSDT', side: 'Shorts', amount: '$3.97M', time: '07-23 08:34' },
    { exchange: 'Bybit', symbol: 'ETHUSD', side: 'Longs', amount: '$1.92M', time: '07-22 17:07' },
    { exchange: 'Bybit', symbol: 'ETHUSD', side: 'Longs', amount: '$1.89M', time: '07-22 13:59' },
    { exchange: 'OKX', symbol: 'BTCUSDT', side: 'Shorts', amount: '$1.55M', time: '07-23 01:15' },
    { exchange: 'dYdX', symbol: 'SOLUSD', side: 'Longs', amount: '$1.21M', time: '07-22 22:40' },
];

const heatmapData = [
    { symbol: 'SPK', amount: '1.58M', color: 'bg-red-500/80', size: 'col-span-3 row-span-2' },
    { symbol: 'ETH', amount: '750.35K', color: 'bg-green-500/80', size: 'col-span-2 row-span-2' },
    { symbol: 'BTC', amount: '1.08M', color: 'bg-green-500/80', size: 'col-span-3 row-span-2' },
    { symbol: 'ENA', amount: '690.96K', color: 'bg-green-500/80', size: 'col-span-2 row-span-2' },
    { symbol: 'Others', amount: '603.94K', color: 'bg-green-500/80', size: 'col-span-2' },
    { symbol: 'PENGU', amount: '387.81K', color: 'bg-green-500/80', size: 'col-span-1' },
    { symbol: 'SOL', amount: '336.58K', color: 'bg-green-500/80', size: 'col-span-2' },
    { symbol: 'XRP', amount: '110.11K', color: 'bg-green-500/80', size: '' },
    { symbol: 'ZORA', amount: '106.56K', color: 'bg-red-500/80', size: '' },
    { symbol: 'SAHARA', amount: '102.51K', color: 'bg-red-500/80', size: '' },
    { symbol: 'DOGE', amount: '90.84K', color: 'bg-green-500/80', size: '' },
];

export function LiquidationTracker() {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div className="lg:col-span-1 space-y-6">
        <div className="grid grid-cols-2 gap-4">
          {liquidationStats.map(stat => (
            <Card key={stat.period} className="bg-card/50 backdrop-blur-sm">
              <CardContent className="p-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-xs font-semibold bg-muted text-muted-foreground px-2 py-1 rounded-full">{stat.period}</span>
                  <span className="font-bold text-lg">{stat.total}</span>
                </div>
                <div className="text-xs space-y-1">
                  <div className="flex justify-between">
                    <span className="text-green-400">Longs</span>
                    <span>{stat.longs}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-red-400">Shorts</span>
                    <span>{stat.shorts}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
        <p className="text-sm text-muted-foreground text-center px-4">
            In the past 24 hours, <span className="font-bold text-foreground">115,602</span> traders were liquidated. The total liquidations comes in at <span className="font-bold text-accent">$315.27M</span>
        </p>
        <Card className="bg-card/50 backdrop-blur-sm border-dashed">
            <CardContent className="pt-6">
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>Exchange</TableHead>
                            <TableHead>Symbol</TableHead>
                            <TableHead>Side</TableHead>
                            <TableHead className="text-right">Amount</TableHead>
                            <TableHead className="text-right">Time</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {recentLiquidations.map((tx, i) => (
                            <TableRow key={i}>
                                <TableCell className="font-medium">{tx.exchange}</TableCell>
                                <TableCell>{tx.symbol}</TableCell>
                                <TableCell className={tx.side === 'Longs' ? 'text-green-400' : 'text-red-400'}>{tx.side}</TableCell>
                                <TableCell className="text-right font-medium">{tx.amount}</TableCell>
                                <TableCell className="text-right text-muted-foreground">{tx.time}</TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
      </div>

      <div className="lg:col-span-2">
        <Card className="bg-card/50 backdrop-blur-sm h-full">
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle className="font-headline">Liquidation Heatmap</CardTitle>
              <div className="flex items-center gap-2">
                <Select defaultValue="all">
                    <SelectTrigger className="w-[120px] h-8 text-xs">
                        <SelectValue placeholder="All" />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectItem value="all">All</SelectItem>
                        <SelectItem value="btc">BTC</SelectItem>
                        <SelectItem value="eth">ETH</SelectItem>
                    </SelectContent>
                </Select>
                <div className="flex items-center bg-muted p-0.5 rounded-md">
                    <Button variant="ghost" size="sm" className="h-7 text-xs px-3 bg-background">1H</Button>
                    <Button variant="ghost" size="sm" className="h-7 text-xs px-3">4H</Button>
                    <Button variant="ghost" size="sm" className="h-7 text-xs px-3">12H</Button>
                    <Button variant="ghost" size="sm" className="h-7 text-xs px-3">1D</Button>
                </div>
                 <div className="flex items-center bg-muted p-0.5 rounded-md">
                    <Button variant="ghost" size="sm" className="h-7 text-xs px-3 bg-background">Symbol</Button>
                    <Button variant="ghost" size="sm" className="h-7 text-xs px-3">Exchange</Button>
                </div>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-5 grid-rows-4 gap-1 h-[500px] text-white font-bold">
              {heatmapData.map((item, index) => (
                <div key={index} className={`${item.color} ${item.size} rounded-md flex flex-col items-center justify-center p-2 text-center`}>
                    <span className="text-xl">{item.symbol}</span>
                    <span className="text-lg">{item.amount}</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="src/components/normal-mode-board.tsx">
'use client';

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from './ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Search, PenSquare, MessageSquare, TrendingUp, Newspaper, Heart, Flame, Pin, User, Languages } from 'lucide-react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { useState } from 'react';
import { PlayerProfile } from './player-profile';

const content = {
    en: {
        title: 'Community Board',
        description: 'Practice strategies and discuss with other players in Normal Mode.',
        searchPlaceholder: 'Search posts...',
        newPost: 'New Post',
        category: 'Category',
        titleHeader: 'Title',
        author: 'Author',
        reactions: 'Reactions',
        views: 'Views',
        popularSearches: 'Popular Searches',
        news: 'News',
        all: 'All',
        defi: 'DeFi',
        nft: 'NFT',
        regulation: 'Regulation',
        popularPosts: 'Popular Posts',
    },
    ko: {
        title: '커뮤니티 게시판',
        description: '일반 모드에서 자유롭게 전략을 테스트하고 다른 플레이어와 토론하세요.',
        searchPlaceholder: '게시물 검색...',
        newPost: '글쓰기',
        category: '분류',
        titleHeader: '제목',
        author: '작성자',
        reactions: '반응',
        views: '조회',
        popularSearches: '인기 검색어',
        news: '카테고리별 뉴스',
        all: '전체',
        defi: '디파이',
        nft: 'NFT',
        regulation: '규제',
        popularPosts: '인기 게시물',
    }
}

const posts = [
  { id: 1, category: '자유', title: '이번 FOMC 어떻게들 보시나요?', author: '경제신동', date: '2023.10.28', views: 1024, comments: 23, hearts: 15, fires: 3, address: '0x5b5d51203a0f9079f8aeb098a6523a13f298c060'},
  { id: 2, category: '분석', title: 'BTC 단기 저항선 분석과 대응 전략', author: '차트도사', date: '2023.10.28', views: 2345, comments: 45, hearts: 128, fires: 40, address: '0x1234...5678' },
  { id: 3, category: '질문', title: '레버리지 처음 써보는데 팁 좀 부탁드립니다', author: '코린이', date: '2023.10.27', views: 512, comments: 12, hearts: 5, fires: 1, address: '0xabcd...efgh' },
  { id: 4, category: '정보', title: '[공유] 유용한 온체인 데이터 분석 사이트 모음', author: '데이터콜렉터', date: '2023.10.27', views: 5421, comments: 88, hearts: 256, fires: 60, address: '0x9876...5432' },
  { id: 5, category: '기타', title: '다들 주말에 뭐하시나요?', author: '주말요정', date: '2023.10.26', views: 234, comments: 5, hearts: 3, fires: 0, address: '0xcafe...babe' },
  { id: 6, category: '분석', title: '솔라나 생태계, 다음 10배 밈코인은?', author: '알트고수', date: '2023.10.25', views: 8910, comments: 156, hearts: 450, fires: 121, address: '0xfeed...face' },
  { id: 7, category: '자유', title: '이번 시즌 챌린저 목표로 달립니다', author: '성투가즈아', date: '2023.10.25', views: 456, comments: 33, hearts: 42, fires: 11, address: '0xdead...beef' },
];

const popularSearches = {
    ko: ['솔라나', '비트코인', 'FOMC', '밈코인', '에어드랍', '이더리움', '변동성', '리더보드', '전략', '신규상장'],
    en: ['Solana', 'Bitcoin', 'FOMC', 'Memecoin', 'Airdrop', 'Ethereum', 'Volatility', 'Leaderboard', 'Strategy', 'New Listing'],
};

const newsItems = {
    ko: {
        all: ['미 연준, 금리 동결 시사... 시장 안도', '이더리움 덴쿤 업그레이드, 가스비 절감 효과 나타나'],
        defi: ['에이프로토콜, V3 버전 출시하며 유동성 채굴 보상 강화'],
        nft: ['유명 NFT 프로젝트, 오프라인 갤러리 전시회 개최'],
        regulation: ['미 SEC, 암호화폐 규제 가이드라인 발표 임박'],
    },
    en: {
        all: ['Fed hints at interest rate freeze, market relieved', 'Ethereum Dencun upgrade shows gas fee reduction effect'],
        defi: ['Aave Protocol boosts liquidity mining rewards with V3 launch'],
        nft: ['Famous NFT project holds offline gallery exhibition'],
        regulation: ['US SEC close to announcing crypto regulation guidelines'],
    },
};

export function NormalModeBoard({ lang }: { lang: 'en' | 'ko' }) {
    const [selectedAddress, setSelectedAddress] = useState<string | null>(null);

    const currentContent = content[lang];
    const currentPosts = posts.map(p => ({
        ...p,
        category: lang === 'ko' ? p.category : (p.category === '자유' ? 'General' : p.category === '분석' ? 'Analysis' : p.category === '질문' ? 'Question' : p.category === '정보' ? 'Info' : 'Misc')
    }));
    const currentSearches = popularSearches[lang];
    const currentNews = newsItems[lang];

    const popularPosts = [...currentPosts].sort((a, b) => (b.hearts + b.fires) - (a.hearts + a.fires)).slice(0, 3);
    
    if (selectedAddress) {
        return (
            <div>
                <Button onClick={() => setSelectedAddress(null)} className="mb-4">
                    &larr; {lang === 'ko' ? '게시판으로 돌아가기' : 'Back to Board'}
                </Button>
                <PlayerProfile />
            </div>
        );
    }

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
            <div className="lg:col-span-3">
                <Card className="bg-card/30 backdrop-blur-sm border-dashed font-body">
                    <CardHeader>
                        <CardTitle className="font-headline text-2xl">{currentContent.title}</CardTitle>
                        <CardDescription>{currentContent.description}</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <div className="mb-8">
                            <h3 className="font-headline text-xl mb-4 flex items-center gap-2">
                                <Pin className="w-5 h-5 text-accent" />
                                {currentContent.popularPosts}
                            </h3>
                            <div className="space-y-3">
                                {popularPosts.map(post => (
                                    <div key={post.id} className="flex items-center justify-between p-3 rounded-lg bg-muted/30 hover:bg-muted/50 cursor-pointer" onClick={() => setSelectedAddress(post.address)}>
                                        <div className="flex items-center gap-3">
                                            <Badge variant="outline" className="border-accent/50 text-accent">{post.category}</Badge>
                                            <span className="font-medium">{post.title}</span>
                                            <span className="text-muted-foreground text-xs flex items-center gap-1">
                                                <MessageSquare className="w-3.5 h-3.5"/>
                                                {post.comments}
                                            </span>
                                        </div>
                                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                                             <div className="flex items-center gap-1.5">
                                                <Heart className="w-4 h-4 text-red-400" />
                                                <span>{post.hearts}</span>
                                            </div>
                                            <div className="flex items-center gap-1.5">
                                                <Flame className="w-4 h-4 text-orange-400" />
                                                <span>{post.fires}</span>
                                            </div>
                                            <span className="w-20 text-right">{post.author}</span>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div className="flex justify-between items-center mb-4">
                            <div className="relative w-full max-w-sm">
                                <Input placeholder={currentContent.searchPlaceholder} className="pr-10 bg-background/50" />
                                <Search className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                            </div>
                            <Button className="bg-accent hover:bg-accent/80 text-accent-foreground">
                                <PenSquare className="mr-2 h-4 w-4" />
                                {currentContent.newPost}
                            </Button>
                        </div>
                        <div className="border rounded-lg overflow-hidden">
                            <Table>
                                <TableHeader className="bg-muted/30">
                                    <TableRow>
                                        <TableHead className="w-[100px] text-center">{currentContent.category}</TableHead>
                                        <TableHead>{currentContent.titleHeader}</TableHead>
                                        <TableHead className="w-[120px] text-center">{currentContent.author}</TableHead>
                                        <TableHead className="w-[120px] text-center">{currentContent.reactions}</TableHead>
                                        <TableHead className="w-[80px] text-center">{currentContent.views}</TableHead>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    {currentPosts.map((post) => (
                                        <TableRow key={post.id} className="hover:bg-accent/10 cursor-pointer" onClick={() => setSelectedAddress(post.address)}>
                                            <TableCell className="text-center">
                                                <Badge variant="outline" className="border-accent/50 text-accent">{post.category}</Badge>
                                            </TableCell>
                                            <TableCell>
                                                <div className="flex items-center gap-2">
                                                    <span>{post.title}</span>
                                                    <span className="text-muted-foreground flex items-center gap-1 text-xs">
                                                        <MessageSquare className="w-3.5 h-3.5"/>
                                                        {post.comments}
                                                    </span>
                                                </div>
                                            </TableCell>
                                            <TableCell className="text-center text-muted-foreground text-xs">{post.author}</TableCell>
                                            <TableCell className="text-muted-foreground text-xs">
                                                <div className="flex items-center justify-center gap-3">
                                                    <div className="flex items-center gap-1">
                                                        <Heart className="w-3.5 h-3.5 text-red-400/80" />
                                                        {post.hearts}
                                                    </div>
                                                    <div className="flex items-center gap-1">
                                                        <Flame className="w-3.5 h-3.5 text-orange-400/80" />
                                                        {post.fires}
                                                    </div>
                                                </div>
                                            </TableCell>
                                            <TableCell className="text-center text-muted-foreground text-xs">{post.views}</TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </div>
                    </CardContent>
                </Card>
            </div>
            <div className="lg:col-span-1 space-y-6">
                <Card className="bg-card/30 backdrop-blur-sm border-dashed">
                    <CardHeader>
                        <CardTitle className="font-headline text-lg flex items-center gap-2">
                           <TrendingUp className="w-5 h-5" />
                           {currentContent.popularSearches}
                        </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <ol className="list-decimal list-inside space-y-2">
                            {currentSearches.map((term, index) => (
                                <li key={index} className="hover:text-accent cursor-pointer">
                                    <span className="font-bold w-6 inline-block">{index + 1}.</span> {term}
                                </li>
                            ))}
                        </ol>
                    </CardContent>
                </Card>
                <Card className="bg-card/30 backdrop-blur-sm border-dashed">
                    <CardHeader>
                        <CardTitle className="font-headline text-lg flex items-center gap-2">
                           <Newspaper className="w-5 h-5" />
                           {currentContent.news}
                        </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <Tabs defaultValue="all" className="w-full">
                            <TabsList className="grid w-full grid-cols-4 mb-4">
                                <TabsTrigger value="all">{currentContent.all}</TabsTrigger>
                                <TabsTrigger value="defi">{currentContent.defi}</TabsTrigger>
                                <TabsTrigger value="nft">{currentContent.nft}</TabsTrigger>
                                <TabsTrigger value="regulation">{currentContent.regulation}</TabsTrigger>
                            </TabsList>
                            <TabsContent value="all">
                               <ul className="space-y-2 text-sm">
                                  {currentNews.all.map((item, i) => (
                                    <li key={i} className="hover:text-accent cursor-pointer truncate">{item}</li>
                                  ))}
                               </ul>
                            </TabsContent>
                            <TabsContent value="defi">
                                <ul className="space-y-2 text-sm">
                                  {currentNews.defi.map((item, i) => (
                                    <li key={i} className="hover:text-accent cursor-pointer truncate">{item}</li>
                                  ))}
                               </ul>
                            </TabsContent>
                            <TabsContent value="nft">
                               <ul className="space-y-2 text-sm">
                                  {currentNews.nft.map((item, i) => (
                                    <li key={i} className="hover:text-accent cursor-pointer truncate">{item}</li>
                                  ))}
                               </ul>
                            </TabsContent>
                             <TabsContent value="regulation">
                               <ul className="space-y-2 text-sm">
                                  {currentNews.regulation.map((item, i) => (
                                    <li key={i} className="hover:text-accent cursor-pointer truncate">{item}</li>
                                  ))}
                               </ul>
                            </TabsContent>
                        </Tabs>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="src/components/player-profile.tsx">
'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import { Copy, Edit, Star } from 'lucide-react';

const pnlData = [
    { date: '27 Feb', pnl: -10 }, { date: '6 Mar', pnl: -15 }, { date: '20 Mar', pnl: -5 }, 
    { date: '3 Apr', pnl: 0 }, { date: '17 Apr', pnl: 5 }, { date: '1 May', pnl: 15 },
    { date: '15 May', pnl: 35 }, { date: '29 May', pnl: 55 }, { date: '12 Jun', pnl: 40 },
    { date: '26 Jun', pnl: 45 }, { date: '30 Jun', pnl: 30 }, { date: '4 Jul', pnl: 25 }, 
    { date: '8 Jul', pnl: 10 }, { date: '12 Jul', pnl: -20 }, { date: '16 Jul', pnl: -50 },
    { date: '19 Jul', pnl: -70 }, { date: '22 Jul', pnl: -83.80 }
];

const positions = [
    { token: 'BTC', side: 'Short', leverage: '10X Cross', value: '$346.26M', amount: '-2.92K BTC', entryPrice: '$110624.1', pnl: '-$ 23.42M', fundingFee: '+$ 6.32M', liqPrice: '$158,355.45' },
    { token: 'ETH', side: 'Short', leverage: '10X Cross', value: '$289.83M', amount: '-78.05K ETH', entryPrice: '$2822.65', pnl: '-$ 69.53M', fundingFee: '+$ 4.35M', liqPrice: '$5,186.22' },
    { token: 'SOL', side: 'Short', leverage: '10X Cross', value: '$70.48M', amount: '-349.10K SOL', entryPrice: '$163.5763', pnl: '-$13.38M', fundingFee: '+$ 1.22M', liqPrice: '$525.93' },
    { token: 'SUI', side: 'Short', leverage: '10X Cross', value: '$809.34K', amount: '-202.24K SUI', entryPrice: '$3.96003', pnl: '-$ 8.47K', fundingFee: '+$ 17.14K', liqPrice: '$563.34' },
    { token: 'HYPE', side: 'Short', leverage: '5X Cross', value: '$79.41M', amount: '-1.79M HYPE', entryPrice: '$39.2636', pnl: '-$ 9.26M', fundingFee: '+$ 1.96M', liqPrice: '$104.89' },
    { token: 'FARTCOIN', side: 'Short', leverage: '10X Cross', value: '$746.50K', amount: '-451.90K FARTCOIN', entryPrice: '$1.07216', pnl: '-$ 261.99K', fundingFee: '+$ 14.53K', liqPrice: '$242.53' },
];

const pnlStats = [
    { label: 'Total PnL', value: '-$ 83.80M' },
    { label: '24-Hour PnL', value: '-$ 1.50M' },
    { label: '48-Hour PnL', value: '-$ 1.50M' },
    { label: '7-Day PnL', value: '-$ 53.01M' },
    { label: '30-Day PnL', value: '-$ 140.54M' },
];


export function PlayerProfile() {
    return (
        <div className="space-y-6">
            <div className="flex items-center gap-4">
                <h2 className="text-xl font-mono text-muted-foreground">Address: 0x5b5d51203a0f9079f8aeb098a6523a13f298c060</h2>
                <div className="flex gap-2">
                    <Button variant="ghost" size="icon" className="text-muted-foreground"><Copy className="w-4 h-4" /></Button>
                    <Button variant="ghost" size="icon" className="text-muted-foreground"><Edit className="w-4 h-4" /></Button>
                    <Button variant="ghost" size="icon" className="text-muted-foreground"><Star className="w-4 h-4" /></Button>
                </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                <div className="lg:col-span-1 space-y-4">
                    {pnlStats.map(stat => (
                        <Card key={stat.label} className="bg-card/30 backdrop-blur-sm border-dashed">
                            <CardContent className="p-4">
                                <p className="text-sm text-muted-foreground">{stat.label}</p>
                                <p className="text-2xl font-bold text-red-400">{stat.value}</p>
                            </CardContent>
                        </Card>
                    ))}
                </div>
                <div className="lg:col-span-3">
                    <Card className="bg-card/30 backdrop-blur-sm border-dashed h-full">
                         <CardHeader>
                            <CardTitle className="font-headline">Total PnL</CardTitle>
                        </CardHeader>
                        <CardContent className="h-[350px] w-full">
                            <ResponsiveContainer width="100%" height="100%">
                                <AreaChart data={pnlData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                                    <defs>
                                        <linearGradient id="colorProfit" x1="0" y1="0" x2="0" y2="1">
                                            <stop offset="5%" stopColor="hsl(var(--chart-2))" stopOpacity={0.4}/>
                                            <stop offset="95%" stopColor="hsl(var(--chart-2))" stopOpacity={0}/>
                                        </linearGradient>
                                        <linearGradient id="colorLoss" x1="0" y1="0" x2="0" y2="1">
                                            <stop offset="5%" stopColor="hsl(var(--chart-1))" stopOpacity={0.4}/>
                                            <stop offset="95%" stopColor="hsl(var(--chart-1))" stopOpacity={0}/>
                                        </linearGradient>
                                    </defs>
                                    <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border) / 0.5)" />
                                    <XAxis dataKey="date" tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }} tickLine={false} axisLine={false} />
                                    <YAxis tickFormatter={(value) => `$${value}M`} tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }} tickLine={false} axisLine={false} />
                                    <Tooltip
                                        contentStyle={{
                                            backgroundColor: 'hsl(var(--background))',
                                            borderColor: 'hsl(var(--border))',
                                            color: 'hsl(var(--foreground))'
                                        }}
                                        labelStyle={{ color: 'hsl(var(--muted-foreground))' }}
                                    />
                                    <Area type="monotone" dataKey="pnl" stroke="hsl(var(--accent))" fill="url(#colorLoss)" />
                                </AreaChart>
                            </ResponsiveContainer>
                        </CardContent>
                    </Card>
                </div>
            </div>

             <div>
                <p className="text-muted-foreground mb-4">Perps Position Value : $787.54M</p>
                <Tabs defaultValue="positions">
                    <TabsList>
                        <TabsTrigger value="positions">Positions</TabsTrigger>
                        <TabsTrigger value="transactions">Transactions</TabsTrigger>
                        <TabsTrigger value="open-orders">Open Orders(0)</TabsTrigger>
                        <TabsTrigger value="deposit-withdraw">Deposit & Withdraw</TabsTrigger>
                    </TabsList>
                    <TabsContent value="positions">
                        <Card className="bg-card/30 backdrop-blur-sm border-dashed">
                            <CardContent className="pt-6">
                                <Table>
                                    <TableHeader>
                                        <TableRow>
                                            <TableHead>Token</TableHead>
                                            <TableHead>Side</TableHead>
                                            <TableHead>Leverage</TableHead>
                                            <TableHead>Value</TableHead>
                                            <TableHead>Amount</TableHead>
                                            <TableHead>Entry Price</TableHead>
                                            <TableHead>Profit & Loss (PnL)</TableHead>
                                            <TableHead>Funding Fee</TableHead>
                                            <TableHead>Liq. Price</TableHead>
                                        </TableRow>
                                    </TableHeader>
                                    <TableBody>
                                        {positions.map((pos, index) => (
                                            <TableRow key={index}>
                                                <TableCell className="font-medium">{pos.token}</TableCell>
                                                <TableCell>
                                                    <Badge variant="destructive" className="bg-red-600/80">{pos.side}</Badge>
                                                </TableCell>
                                                <TableCell>{pos.leverage}</TableCell>
                                                <TableCell>{pos.value}</TableCell>
                                                <TableCell>{pos.amount}</TableCell>
                                                <TableCell>{pos.entryPrice}</TableCell>
                                                <TableCell className="text-red-400">{pos.pnl}</TableCell>
                                                <TableCell className="text-green-400">{pos.fundingFee}</TableCell>
                                                <TableCell>{pos.liqPrice}</TableCell>
                                            </TableRow>
                                        ))}
                                    </TableBody>
                                </Table>
                            </CardContent>
                        </Card>
                    </TabsContent>
                </Tabs>
            </div>
        </div>
    );
}
</file>

<file path="src/components/ranked-mode-board.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Trophy, TrendingUp, TrendingDown, Target, Zap, Shield, AlertTriangle, Star, History } from 'lucide-react';
import { TradingViewChart } from '@/components/trading-view-chart';
import { VolatilityGauge } from '@/components/volatility-gauge';
import { ApiConnectionStatus } from '@/components/api-connection-status';

interface TradingStats {
  totalTrades: number;
  winRate: number;
  profitLoss: number;
  maxDrawdown: number;
  sharpeRatio: number;
  rank: number;
  level: number;
  experience: number;
  nextLevelExp: number;
}

interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  unlocked: boolean;
  progress: number;
  maxProgress: number;
}

export function RankedModeBoard({ lang }: { lang: 'en' | 'ko' }) {
  const [stats, setStats] = useState<TradingStats>({
    totalTrades: 156,
    winRate: 68.5,
    profitLoss: 24500,
    maxDrawdown: -8.2,
    sharpeRatio: 1.85,
    rank: 42,
    level: 15,
    experience: 1250,
    nextLevelExp: 2000
  });

  const [achievements] = useState<Achievement[]>([
    {
      id: 'first-million',
      name: 'First Million',
      description: '첫 100만 달러 거래 달성',
      icon: <Target className="w-4 h-4" />,
      unlocked: true,
      progress: 100,
      maxProgress: 100
    },
    {
      id: 'risk-master',
      name: 'Risk Master',
      description: '연속 10일 리스크 관리 우수',
      icon: <Shield className="w-4 h-4" />,
      unlocked: false,
      progress: 7,
      maxProgress: 10
    },
    {
      id: 'speed-trader',
      name: 'Speed Trader',
      description: '1분 내 10회 거래 성공',
      icon: <Zap className="w-4 h-4" />,
      unlocked: false,
      progress: 6,
      maxProgress: 10
    },
    {
      id: 'volatility-warrior',
      name: 'Volatility Warrior',
      description: '높은 변동성에서 5회 연속 수익',
      icon: <AlertTriangle className="w-4 h-4" />,
      unlocked: false,
      progress: 3,
      maxProgress: 5
    }
  ]);

  const [recentTrades] = useState([
    { id: 1, symbol: 'BTC/USD', type: 'buy', amount: 0.5, price: 43250, pnl: 1250, time: '2분 전' },
    { id: 2, symbol: 'ETH/USD', type: 'sell', amount: 2.1, price: 2650, pnl: -320, time: '15분 전' },
    { id: 3, symbol: 'SOL/USD', type: 'buy', amount: 10, price: 98.5, pnl: 450, time: '1시간 전' },
  ]);

  const experienceProgress = (stats.experience / stats.nextLevelExp) * 100;

  return (
    <div className="space-y-6">
      {/* Top Section - Critical Info at a Glance */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-4">
        {/* Rank & Level - Most Important */}
        <Card className="lg:col-span-2">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold">🏆 Ranked Mode</h2>
                <p className="text-muted-foreground">실시간 거래 및 성과 추적</p>
              </div>
              <div className="flex items-center gap-3">
                <Badge variant="secondary" className="text-sm px-3 py-1">
                  <Trophy className="w-4 h-4 mr-1" />
                  Rank #{stats.rank}
                </Badge>
                <Badge variant="outline" className="text-sm px-3 py-1">
                  Level {stats.level}
                </Badge>
              </div>
            </div>
            
            {/* Level Progress Bar */}
            <div className="mt-4 space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">레벨 진행도</span>
                <span className="font-medium">{stats.experience} / {stats.nextLevelExp} EXP</span>
              </div>
              <Progress value={experienceProgress} className="h-2" />
              <p className="text-xs text-muted-foreground text-center">
                다음 레벨까지 {stats.nextLevelExp - stats.experience} EXP 필요
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Profit/Loss - Key Metric */}
        <Card>
          <CardContent className="p-6">
            <div className="text-center">
              <p className="text-sm text-muted-foreground mb-1">오늘 손익</p>
              <p className={`text-3xl font-bold ${stats.profitLoss >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                ${stats.profitLoss.toLocaleString()}
              </p>
              <div className="flex items-center justify-center gap-1 mt-1">
                {stats.profitLoss >= 0 ? (
                  <TrendingUp className="w-4 h-4 text-green-500" />
                ) : (
                  <TrendingDown className="w-4 h-4 text-red-500" />
                )}
                <span className="text-xs text-muted-foreground">
                  {stats.profitLoss >= 0 ? '+' : ''}{((stats.profitLoss / 100000) * 100).toFixed(1)}%
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Win Rate - Key Metric */}
        <Card>
          <CardContent className="p-6">
            <div className="text-center">
              <p className="text-sm text-muted-foreground mb-1">승률</p>
              <p className="text-3xl font-bold text-green-500">{stats.winRate}%</p>
              <div className="flex items-center justify-center gap-1 mt-1">
                <Target className="w-4 h-4 text-accent" />
                <span className="text-xs text-muted-foreground">{stats.totalTrades} 거래</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content Area - Enhanced Chart */}
      <TradingViewChart />

      {/* Additional Monitoring Tools */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* API Connection - Critical for Trading */}
        <ApiConnectionStatus />
        
        {/* Volatility Gauge - Market Condition */}
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">시장 변동성</CardTitle>
          </CardHeader>
          <CardContent>
            <VolatilityGauge lang={lang} />
          </CardContent>
        </Card>
      </div>

      {/* Bottom Section - Detailed Info */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Trades - Trading History */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <History className="w-5 h-5" />
              최근 거래
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {recentTrades.map((trade) => (
                <div key={trade.id} className="flex items-center justify-between p-3 rounded-lg bg-muted/50">
                  <div>
                    <p className="font-medium">{trade.symbol}</p>
                    <p className="text-sm text-muted-foreground">{trade.time}</p>
                  </div>
                  <div className="text-right">
                    <p className={`font-medium ${trade.pnl >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                      ${trade.pnl.toLocaleString()}
                    </p>
                    <Badge variant={trade.type === 'buy' ? 'default' : 'secondary'} className="text-xs">
                      {trade.type.toUpperCase()}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Achievements - Gamification */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Trophy className="w-5 h-5" />
              업적 시스템
            </CardTitle>
            <CardDescription>
              거래 성과에 따른 업적을 달성하세요
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 gap-3">
              {achievements.map((achievement) => (
                <div
                  key={achievement.id}
                  className={`p-3 rounded-lg border ${
                    achievement.unlocked ? 'bg-accent/10 border-accent' : 'bg-muted/50'
                  }`}
                >
                  <div className="flex items-center gap-3">
                    <div className={`p-2 rounded-full ${
                      achievement.unlocked ? 'bg-accent text-accent-foreground' : 'bg-muted'
                    }`}>
                      {achievement.icon}
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium text-sm">{achievement.name}</h4>
                      <p className="text-xs text-muted-foreground">{achievement.description}</p>
                      <div className="mt-2">
                        <div className="flex justify-between text-xs text-muted-foreground mb-1">
                          <span>진행도</span>
                          <span>{achievement.progress}/{achievement.maxProgress}</span>
                        </div>
                        <Progress value={(achievement.progress / achievement.maxProgress) * 100} className="h-1" />
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="src/components/trading-alerts.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Bell, AlertTriangle, CheckCircle, Info, X } from 'lucide-react';

interface TradingAlert {
  id: string;
  type: 'success' | 'warning' | 'info' | 'error';
  title: string;
  message: string;
  time: string;
  symbol?: string;
  price?: number;
  action?: string;
}

export function TradingAlerts() {
  const [alerts, setAlerts] = useState<TradingAlert[]>([
    {
      id: '1',
      type: 'success',
      title: '거래 성공',
      message: 'BTC/USD 매수 주문이 체결되었습니다',
      time: '방금 전',
      symbol: 'BTC/USD',
      price: 43250,
      action: '매수'
    },
    {
      id: '2',
      type: 'warning',
      title: '변동성 증가',
      message: 'ETH/USD 변동성이 15% 증가했습니다',
      time: '2분 전',
      symbol: 'ETH/USD',
      price: 2650
    },
    {
      id: '3',
      type: 'info',
      title: 'API 연결',
      message: 'Binance API가 성공적으로 연결되었습니다',
      time: '5분 전'
    },
    {
      id: '4',
      type: 'error',
      title: '주문 실패',
      message: 'SOL/USD 매도 주문이 거부되었습니다',
      time: '10분 전',
      symbol: 'SOL/USD',
      price: 98.5,
      action: '매도'
    }
  ]);

  const [isExpanded, setIsExpanded] = useState(false);

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'success':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'warning':
        return <AlertTriangle className="w-4 h-4 text-yellow-500" />;
      case 'error':
        return <AlertTriangle className="w-4 h-4 text-red-500" />;
      default:
        return <Info className="w-4 h-4 text-blue-500" />;
    }
  };

  const getAlertColor = (type: string) => {
    switch (type) {
      case 'success':
        return 'border-green-200 bg-green-50';
      case 'warning':
        return 'border-yellow-200 bg-yellow-50';
      case 'error':
        return 'border-red-200 bg-red-50';
      default:
        return 'border-blue-200 bg-blue-50';
    }
  };

  const dismissAlert = (id: string) => {
    setAlerts(prev => prev.filter(alert => alert.id !== id));
  };

  const visibleAlerts = isExpanded ? alerts : alerts.slice(0, 3);

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Bell className="w-5 h-5" />
          실시간 알림
          <Badge variant="secondary" className="ml-auto">
            {alerts.length}
          </Badge>
        </CardTitle>
        <CardDescription>
          거래 및 시장 이벤트 실시간 알림
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {visibleAlerts.map((alert) => (
            <div
              key={alert.id}
              className={`p-3 rounded-lg border ${getAlertColor(alert.type)}`}
            >
              <div className="flex items-start justify-between">
                <div className="flex items-start gap-3 flex-1">
                  {getAlertIcon(alert.type)}
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-medium text-sm">{alert.title}</h4>
                      <span className="text-xs text-muted-foreground">{alert.time}</span>
                    </div>
                    <p className="text-sm text-muted-foreground mb-2">{alert.message}</p>
                    {alert.symbol && (
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="text-xs">
                          {alert.symbol}
                        </Badge>
                        {alert.price && (
                          <span className="text-xs font-medium">
                            ${alert.price.toLocaleString()}
                          </span>
                        )}
                        {alert.action && (
                          <Badge variant="secondary" className="text-xs">
                            {alert.action}
                          </Badge>
                        )}
                      </div>
                    )}
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => dismissAlert(alert.id)}
                  className="h-6 w-6 p-0"
                >
                  <X className="w-3 h-3" />
                </Button>
              </div>
            </div>
          ))}
          
          {alerts.length > 3 && (
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsExpanded(!isExpanded)}
              className="w-full"
            >
              {isExpanded ? '접기' : `${alerts.length - 3}개 더 보기`}
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/trading-view-chart.tsx">
'use client';

import React, { useEffect, useRef, memo, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { TrendingUp, TrendingDown, Target, DollarSign, Activity, Settings } from 'lucide-react';

function TradingViewChart() {
  const container = useRef<HTMLDivElement>(null);
  const [selectedSymbol, setSelectedSymbol] = useState('BINANCE:BTCUSDT');
  const [selectedInterval, setSelectedInterval] = useState('60');
  const [orderType, setOrderType] = useState('market');
  const [orderSize, setOrderSize] = useState('0.1');
  const [orderPrice, setOrderPrice] = useState('43250');

  const symbols = [
    { value: 'BINANCE:BTCUSDT', label: 'BTC/USDT', price: '43,250', change: '+2.5%' },
    { value: 'BINANCE:ETHUSDT', label: 'ETH/USDT', price: '2,650', change: '+1.8%' },
    { value: 'BINANCE:SOLUSDT', label: 'SOL/USDT', price: '98.5', change: '+5.2%' },
    { value: 'BINANCE:ADAUSDT', label: 'ADA/USDT', price: '0.45', change: '-0.8%' },
  ];

  const intervals = [
    { value: '1', label: '1m' },
    { value: '5', label: '5m' },
    { value: '15', label: '15m' },
    { value: '60', label: '1h' },
    { value: '240', label: '4h' },
    { value: 'D', label: '1D' },
  ];

  useEffect(() => {
    if (container.current && !container.current.querySelector('script')) {
      const script = document.createElement('script');
      script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js';
      script.type = 'text/javascript';
      script.async = true;
      script.innerHTML = `
        {
          "width": "100%",
          "height": "100%",
          "symbol": "${selectedSymbol}",
          "interval": "${selectedInterval}",
          "timezone": "Etc/UTC",
          "theme": "dark",
          "style": "1",
          "locale": "en",
          "enable_publishing": false,
          "backgroundColor": "rgba(23, 27, 38, 0)",
          "gridColor": "rgba(255, 255, 255, 0.06)",
          "withdateranges": true,
          "hide_side_toolbar": false,
          "allow_symbol_change": true,
          "details": true,
          "hotlist": true,
          "calendar": false,
          "support_host": "https://www.tradingview.com",
          "studies": [
            "RSI@tv-basicstudies",
            "MACD@tv-basicstudies",
            "BB@tv-basicstudies"
          ],
          "show_popup_button": true,
          "popup_width": "1000",
          "popup_height": "650"
        }`;
      container.current.appendChild(script);
    }
  }, [selectedSymbol, selectedInterval]);

  const handleBuy = () => {
    // Simulate buy order
    console.log(`Buy ${orderSize} ${selectedSymbol} at ${orderPrice}`);
  };

  const handleSell = () => {
    // Simulate sell order
    console.log(`Sell ${orderSize} ${selectedSymbol} at ${orderPrice}`);
  };

  return (
    <div className="grid grid-cols-1 xl:grid-cols-4 gap-4 h-[450px]">
      {/* Main Chart Area */}
      <div className="xl:col-span-3">
        <Card className="h-full">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <Activity className="w-5 h-5" />
                실시간 거래 차트
              </CardTitle>
              <div className="flex items-center gap-2">
                <Select value={selectedSymbol} onValueChange={setSelectedSymbol}>
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {symbols.map((symbol) => (
                      <SelectItem key={symbol.value} value={symbol.value}>
                        {symbol.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Select value={selectedInterval} onValueChange={setSelectedInterval}>
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {intervals.map((interval) => (
                      <SelectItem key={interval.value} value={interval.value}>
                        {interval.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-0 h-full">
            <div className="tradingview-widget-container" ref={container} style={{ height: "calc(100% - 60px)", width: "100%" }}>
              <div className="tradingview-widget-container__widget" style={{ height: "100%", width: "100%" }}></div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Trading Side Panel */}
      <div className="xl:col-span-1 space-y-4">
        {/* Market Overview & Quick Trade Row */}
        <div className="grid grid-cols-1 xl:grid-cols-2 gap-4">
          {/* Market Overview */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-base">시장 개요</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Top Gainers/Losers */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Top Movers</span>
                  <div className="flex gap-1">
                    <Badge variant="default" className="text-xs">Gainers</Badge>
                    <Badge variant="secondary" className="text-xs">Losers</Badge>
                  </div>
                </div>
                <div className="space-y-1">
                  <div className="flex items-center justify-between p-1 rounded bg-green-500/10">
                    <span className="text-xs font-medium">SOL</span>
                    <span className="text-xs text-green-500">+15.2%</span>
                  </div>
                  <div className="flex items-center justify-between p-1 rounded bg-green-500/10">
                    <span className="text-xs font-medium">AVAX</span>
                    <span className="text-xs text-green-500">+8.7%</span>
                  </div>
                  <div className="flex items-center justify-between p-1 rounded bg-red-500/10">
                    <span className="text-xs font-medium">ADA</span>
                    <span className="text-xs text-red-500">-3.2%</span>
                  </div>
                  <div className="flex items-center justify-between p-1 rounded bg-red-500/10">
                    <span className="text-xs font-medium">DOT</span>
                    <span className="text-xs text-red-500">-2.1%</span>
                  </div>
                </div>
              </div>

              {/* Volatility Gauge */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">시장 변동성</span>
                  <span className="text-xs text-muted-foreground">높음</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-gradient-to-r from-green-500 via-yellow-500 to-red-500 h-2 rounded-full" style={{ width: '75%' }}></div>
                </div>
                <p className="text-xs text-muted-foreground">현재 변동성 지수: 75%</p>
              </div>
              
              {/* Bitcoin Dominance */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">비트코인 도미넌스</span>
                  <span className="text-xs text-muted-foreground">52.3%</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-blue-500 h-2 rounded-full" style={{ width: '52.3%' }}></div>
                </div>
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>24h: 51.8%</span>
                  <span>7d: 53.1%</span>
                </div>
              </div>

              {/* Fear & Greed Index */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Fear & Greed Index</span>
                  <span className="text-xs text-muted-foreground">Greed</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-yellow-500 h-2 rounded-full" style={{ width: '65%' }}></div>
                </div>
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>Value: 65</span>
                  <span>Yesterday: 58</span>
                </div>
              </div>

              {/* 24h Volume */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">24h Volume</span>
                  <span className="text-xs text-muted-foreground">$402.1B</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-purple-500 h-2 rounded-full" style={{ width: '85%' }}></div>
                </div>
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>변화: -0.94%</span>
                  <span>평균: $450B</span>
                </div>
              </div>

              {/* Open Interest */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Open Interest</span>
                  <span className="text-xs text-muted-foreground">$201.7B</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-orange-500 h-2 rounded-full" style={{ width: '72%' }}></div>
                </div>
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>변화: +3.68%</span>
                  <span>최고: $280B</span>
                </div>
              </div>

              {/* 24h Liquidation */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">24h Liquidation</span>
                  <span className="text-xs text-muted-foreground">$463.3M</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-red-500 h-2 rounded-full" style={{ width: '35%' }}></div>
                </div>
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>변화: -16.21%</span>
                  <span>최고: $1.2B</span>
                </div>
              </div>

              {/* Long/Short Ratio */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Long/Short Ratio</span>
                  <span className="text-xs text-muted-foreground">47.84%/52.16%</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-gradient-to-r from-green-500 to-red-500 h-2 rounded-full" style={{ width: '52.16%' }}></div>
                </div>
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>Long: 47.84%</span>
                  <span>Short: 52.16%</span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Quick Trade */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-base">빠른 거래</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="symbol">심볼</Label>
                <Select value={selectedSymbol} onValueChange={setSelectedSymbol}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {symbols.map((symbol) => (
                      <SelectItem key={symbol.value} value={symbol.value}>
                        {symbol.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="orderType">주문 유형</Label>
                <Select value={orderType} onValueChange={setOrderType}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="market">시장가</SelectItem>
                    <SelectItem value="limit">지정가</SelectItem>
                    <SelectItem value="stop">스탑</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="size">수량</Label>
                <Input
                  id="size"
                  type="number"
                  value={orderSize}
                  onChange={(e) => setOrderSize(e.target.value)}
                  placeholder="0.1"
                />
              </div>

              {orderType === 'limit' && (
                <div className="space-y-2">
                  <Label htmlFor="price">가격</Label>
                  <Input
                    id="price"
                    type="number"
                    value={orderPrice}
                    onChange={(e) => setOrderPrice(e.target.value)}
                    placeholder="43250"
                  />
                </div>
              )}

              <div className="flex gap-2">
                <Button 
                  onClick={handleBuy} 
                  className="flex-1 bg-green-600 hover:bg-green-700"
                  size="sm"
                >
                  <TrendingUp className="w-4 h-4 mr-1" />
                  매수
                </Button>
                <Button 
                  onClick={handleSell} 
                  className="flex-1 bg-red-600 hover:bg-red-700"
                  size="sm"
                >
                  <TrendingDown className="w-4 h-4 mr-1" />
                  매도
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Trading Tools */}
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">거래 도구</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <Button variant="outline" className="w-full justify-start" size="sm">
              <Target className="w-4 h-4 mr-2" />
              손절/익절 설정
            </Button>
            <Button variant="outline" className="w-full justify-start" size="sm">
              <DollarSign className="w-4 h-4 mr-2" />
              포지션 계산기
            </Button>
            <Button variant="outline" className="w-full justify-start" size="sm">
              <Settings className="w-4 h-4 mr-2" />
              거래 설정
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export const MemoizedTradingViewChart = memo(TradingViewChart);
export { TradingViewChart };
</file>

<file path="src/components/user-nav.tsx">
'use client';

import { GanttChartSquare, Languages, LogIn, User } from 'lucide-react';
import Link from 'next/link';
import { Button } from './ui/button';
import { AuthModal } from './auth-modal';
import { useState } from 'react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Avatar, AvatarFallback } from './ui/avatar';
import { useToast } from '@/hooks/use-toast';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';

export const UserNav = () => {
    const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
    return         <>
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                  <Avatar className="h-8 w-8">
                    <AvatarFallback>
                      <User className="h-5 w-5" />
                    </AvatarFallback>
                  </Avatar>
                </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
                <DropdownMenuLabel className="font-normal">
                    <div className="flex flex-col space-y-1">
                        <p className="text-sm font-medium leading-none">Guest</p>
                        <p className="text-xs leading-none text-muted-foreground">
                            guest@tradeos.pro
                        </p>
                    </div>
                </DropdownMenuLabel>
                 <DropdownMenuSeparator />
                <DropdownMenuGroup>
                    <DropdownMenuItem onClick={() => setIsAuthModalOpen(true)}>
                       <LogIn className="mr-2 h-4 w-4" />
                        <span>Login / Sign Up</span>
                    </DropdownMenuItem>
                </DropdownMenuGroup>
            </DropdownMenuContent>
        </DropdownMenu>
        <AuthModal isOpen={isAuthModalOpen} onOpenChange={setIsAuthModalOpen} />
        </>
}
</file>

<file path="src/components/volatility-gauge.tsx">
'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { cn } from '@/lib/utils';
import { TrendingUp } from 'lucide-react';

const getGaugeLevels = (lang: 'en' | 'ko') => [
  { level: 1, name: lang === 'ko' ? '고요' : 'Calm', color: 'bg-blue-500', animation: 'animate-pulse-calm', description: lang === 'ko' ? '시장이 안정적입니다. 낮은 변동성이 감지됩니다.' : 'Markets are stable. Low volatility detected.' },
  { level: 2, name: lang === 'ko' ? '긴장' : 'Tension', color: 'bg-yellow-500', animation: 'animate-pulse-tension', description: lang === 'ko' ? '변동성이 증가하고 있습니다. 시장의 긴장감이 고조됩니다.' : 'Volatility increasing. Market tension is building.' },
  { level: 3, name: lang === 'ko' ? '임계' : 'Critical', color: 'bg-red-500', animation: 'animate-flash-red', description: lang === 'ko' ? '임계 변동성! 랭크 게임이 임박했습니다.' : 'Critical volatility! Ranked game imminent.' },
  { level: 4, name: lang === 'ko' ? '폭발' : 'Explosion', color: 'bg-accent', animation: 'animate-ping', description: lang === 'ko' ? '랭크 게임 시작! 변동성이 폭발했습니다.' : 'Ranked Game Started! Volatility has exploded.' },
];

const content = {
    en: {
        title: 'Volatility Gauge',
        levelLabel: 'Market Tension Level',
        countdown: (time: string) => `RANKED GAME STARTING IN: ${time}`,
        live: 'RANKED GAME LIVE'
    },
    ko: {
        title: '변동성 게이지',
        levelLabel: '시장 긴장도 레벨',
        countdown: (time: string) => `랭크 게임 시작까지: ${time}`,
        live: '랭크 게임 진행 중'
    }
}

export function VolatilityGauge({ lang }: { lang: 'en' | 'ko' }) {
  const [currentLevel, setCurrentLevel] = useState(0);
  const gaugeLevels = getGaugeLevels(lang);
  const currentContent = content[lang];

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentLevel((prevLevel) => (prevLevel + 1) % gaugeLevels.length);
    }, 5000); // Cycle through levels every 5 seconds for demo

    return () => clearInterval(interval);
  }, []);

  const { name, color, animation, description } = gaugeLevels[currentLevel];

  return (
    <Card className="border-2 border-border/50 bg-card/80 backdrop-blur-xl shadow-2xl shadow-accent/10">
      <CardHeader className="text-center">
        <CardTitle className="font-headline text-3xl tracking-wider flex items-center justify-center gap-2">
          <TrendingUp className="w-8 h-8"/> {currentContent.title}
        </CardTitle>
        <CardDescription className="font-body text-lg">
          {currentContent.levelLabel}: <span className="font-bold text-accent">{name}</span>
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col items-center justify-center gap-6">
          <div className="w-full h-48 bg-black/20 rounded-lg flex items-center justify-center p-4 overflow-hidden">
            {/* This is a simplified representation of a seismic wave / heartbeat */}
            <div className={cn("w-full h-2 rounded-full", color, animation)}></div>
          </div>
          <p className="text-center text-muted-foreground font-body max-w-md">{description}</p>
          
          {name === (lang === 'ko' ? '임계' : 'Critical') && (
             <div className="font-code text-2xl text-red-400 animate-pulse">
                {currentContent.countdown('00:59')}
             </div>
          )}

          {name === (lang === 'ko' ? '폭발' : 'Explosion') && (
             <div className="font-logo text-3xl text-accent tracking-widest animate-pulse">
                {currentContent.live}
             </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/types/svg.d.ts">
declare module '*.svg' {
  import React from 'react';
  const SVG: React.FC<React.SVGProps<SVGSVGElement>>;
  export default SVG;
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

.genkit/*
.env*

# firebase
firebase-debug.log
firestore-debug.log
</file>

<file path="apphosting.yaml">
# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="next.config.ts">
import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
  },
  webpack(config) {
    config.module.rules.push({
      test: /\.svg$/,
      use: ['@svgr/webpack'],
    });
    return config;
  },
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack -p 9002",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.14.1",
    "@genkit-ai/next": "^1.14.1",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^11.9.1",
    "genkit": "^1.14.1",
    "lucide-react": "^0.475.0",
    "next": "^15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@svgr/webpack": "^8.1.0",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.14.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.
</file>

<file path="tailwind.config.ts">
import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        body: ['Roboto Mono', 'monospace'],
        headline: ['Orbitron', 'sans-serif'],
        logo: ['Russo One', 'sans-serif'],
        code: ['Roboto Mono', 'monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
        'pulse-calm': {
          '0%, 100%': { transform: 'scale(1)', opacity: '1' },
          '50%': { transform: 'scale(1.02)', opacity: '0.9' },
        },
        'pulse-tension': {
          '0%, 100%': { transform: 'scale(1)', opacity: '1' },
          '50%': { transform: 'scale(1.05)', opacity: '0.8' },
        },
        'flash-red': {
          '0%, 100%': { backgroundColor: 'hsl(var(--destructive))' },
          '50%': { backgroundColor: 'hsl(var(--accent))' },
        },
        'pulse-glow': {
          '0%, 100%': { opacity: '0.5', transform: 'scale(1)' },
          '50%': { opacity: '1', transform: 'scale(1.02)' },
        }
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'pulse-calm': 'pulse-calm 4s ease-in-out infinite',
        'pulse-tension': 'pulse-tension 1.5s ease-in-out infinite',
        'flash-red': 'flash-red 1s ease-in-out infinite',
        'pulse-glow': 'pulse-glow 8s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
